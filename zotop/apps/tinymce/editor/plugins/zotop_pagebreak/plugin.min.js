/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('zotop_pagebreak', function(editor) {

	var pageBreakClass = 'mce-pagebreak';
	var	separatorHtml  = editor.getParam('pagebreak_separator', '<p class="mce-pagebreak">&nbsp;</p>');
	var pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\?\.\*\[\]\(\)\{\}\+\^\$\:]/g, function(a) {
		return '\\' + a;
	}), 'gi');

	var toElement = function() {
        var div = document.createElement('div');
        return function(html) {
            div.innerHTML = html;
            html = div.firstChild;
            div.removeChild(html);
            return html;
        };
    }();

    function lastElementChild(elem) {
        if (elem.lastElementChild) {
            return elem.lastElementChild;
        }
        var child = elem.lastChild;
        while (child && child.nodeType != 1) {
            child = child.previousSibling;
        }
        return child;
    }

    function nextElementSibling(elem) {
        if (elem.nextElementSibling) {
            return elem.nextElementSibling;
        }
        var sibling = elem.nextSibling;
        while (sibling && sibling.nodeType != 1) {
            sibling = sibling.nextSibling;
        }
        return sibling;
    }	

	// Register commands
	editor.addCommand('mcePageBreak', function() {
		editor.execCommand('mceInsertContent', 0, separatorHtml);		
        if (editor.dom.select('p.' + pageBreakClass).length == 1) {
            editor.selection.setCursorLocation(editor.getBody().firstChild, 0);
            editor.execCommand('mceInsertContent', 0, separatorHtml);
            var firstBreak = editor.dom.select('p.' + pageBreakClass)[0],
                nextElement = nextElementSibling(firstBreak);
            if (nextElement && editor.dom.hasClass(nextElement, pageBreakClass)) {
                nextElement.parentNode.insertBefore(toElement('<p>&nbsp;</p>'), nextElement);
            }
        }
        var body = editor.getBody(), 
        	lastChild = lastElementChild(body);
        if (lastChild && editor.dom.hasClass(lastChild, pageBreakClass)) {
            body.appendChild(toElement('<p>&nbsp;</p>'));
        }
	});

	// Register buttons
	editor.addButton('pagebreak', {
		title: 'Page break',
		cmd: 'mcePageBreak'
	});

	editor.addMenuItem('pagebreak', {
		text: 'Page break',
		icon: 'pagebreak',
		cmd: 'mcePageBreak',
		context: 'insert'
	});

	editor.on('ResolveName', function(e) {
		if (e.target.nodeName == 'p' && editor.dom.hasClass(e.target, pageBreakClass)) {
			e.name = 'pagebreak';
		}
	});

	editor.on('click', function(e) {
		e = e.target;
		if (e.nodeName === 'p' && editor.dom.hasClass(e, pageBreakClass)) {
			editor.selection.select(e);
		}
	});

	editor.on('BeforeSetContent', function(e) {
		e.content = e.content.replace(pageBreakSeparatorRegExp, separatorHtml);
	});
});
