<?php
 defined('ZOTOP') or die('No direct script access.'); class application { public static function boot() { register_shutdown_function(array('application', 'shutdown_handler')); set_error_handler(array('application', 'error_handler')); set_exception_handler(array('application', 'exception_handler')); if (function_exists('date_default_timezone_set')) { $timezone = c('system.locale_timezone'); $timezone = 'Etc/GMT' . ($timezone > 0 ? '-' : '+') . (abs($timezone)); date_default_timezone_set($timezone); } ob_start(array('application', 'output_buffer')); } public static function finduri() { $var = c('system.url_var'); if (!empty($_GET[$var])) { $_SERVER['PATH_INFO'] = $_GET[$var]; unset($_GET[$var]); } foreach (array( 'PATH_INFO', 'ORIG_PATH_INFO', 'PHP_SELF') as $v) { if (isset($_SERVER[$v]) and $_SERVER[$v]) { $uri = $_SERVER[$v]; break; } } if (isset($_SERVER['SCRIPT_NAME']) and $_SERVER['SCRIPT_NAME']) { if (strncmp($uri, $_SERVER['SCRIPT_NAME'], strlen($_SERVER['SCRIPT_NAME'])) === 0) { $uri = (string )substr($uri, strlen($_SERVER['SCRIPT_NAME'])); } } if ($uri = trim($uri, '/')) { if ($suffix = c('system.url_suffix')) { $uri = preg_replace('#' . preg_quote($suffix) . '$#u', '', $uri); } $uri = preg_replace('#//+#', '/', $uri); } zotop::$uri = empty($uri) ? zotop::$uri : $uri; zotop::$uri = strtolower(trim(trim(zotop::$uri), '/')); } public static function execute() { define('ZOTOP_URI', trim(trim(zotop::$uri), '/')); $arguments = explode('/', ZOTOP_URI); $app = array_shift($arguments); $controller = array_shift($arguments); $action = array_shift($arguments); if ( !preg_match("/^[0-9a-z_]+\$/i", $app) or A($app) == false or intval(A("{$app}.status")) < 1) { throw new zotop_exception(t('The app [ %s ] has no access or not exists', $app), 404); } $controller = preg_match("/^[0-9a-z_]+\$/i", $controller) ? $controller : 'index'; $controller_path = A("{$app}.path") . DS . 'controllers' . DS . $controller . '.php'; $controller_class = "{$app}_controller_{$controller}"; if ( zotop::load($controller_path) and class_exists($controller_class, false) ) { $c = new $controller_class(); if ( !method_exists($c, 'action_' . $action) ) { if (strlen($action) > 0) { $arguments = array_merge(array($action), $arguments); } $action = $c->default_action; } define('ZOTOP_APP', $app); define('ZOTOP_CONTROLLER', $controller); define('ZOTOP_ACTION', $action); call_user_func_array(array($c, '__init'), $arguments); if ( method_exists($c, 'action_' . $action) ) { call_user_func_array(array($c, 'action_' . $action), $arguments); } else { call_user_func_array(array($c, '__empty'), array($action, $arguments)); } unset($c); } else { throw new zotop_exception(t('The system is unable to find the requested controller or class :"%s"', debug::path($controller_path)), 404); } } public static function render() { $output = ob_get_contents(); ob_clean(); echo zotop::filter('zotop.output', $output); unset($output); exit(1); } public static function output_buffer($data = '') { $strlen = strlen($data); if (isset($_SERVER['HTTP_ACCEPT_ENCODING']) && $strlen > 255 && extension_loaded('zlib') && !ini_get('zlib.output_compression') && ini_get('output_handler') != 'ob_gzhandler') { $data = gzencode($data, 9); $strlen = strlen($data); header('Content-Encoding: gzip'); header('Vary: Accept-Encoding'); } header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); header('ETag: "' . $strlen . '-' . time() . '"'); header('X-Powered-By: zotop'); header('Accept-Ranges: bytes'); return $data; } public static function shutdown_handler() { if ($error = error_get_last()) { ob_get_level() and ob_clean(); application::exception_handler(new ErrorException($error['message'], $error['type'], 0, $error['file'], $error['line'])); exit(1); } } public static function error_handler($code, $error, $file = null, $line = null) { if (error_reporting() & $code) { throw new ErrorException($error, $code, 0, $file, $line); } return true; } public static function exception_handler(Exception $e) { try { $type = get_class($e); $code = $e->getCode(); $message = $e->getMessage(); $file = $e->getFile(); $line = $e->getLine(); $trace = $e->getTrace(); if ( $e instanceof ErrorException ) { if ( isset(zotop_exception::$php_errors[$code]) ) { $code = zotop_exception::$php_errors[$code]; } if ( version_compare(PHP_VERSION, '5.3', '<') ) { for ($i = count($trace) - 1; $i > 0; -- $i) { if ( isset($trace[$i - 1]['args']) ) { $trace[$i]['args'] = $trace[$i - 1]['args']; unset($trace[$i - 1]['args']); } } } } $error = zotop_exception::text($e); if ( strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' OR strtolower($_REQUEST['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' ) { ob_clean(); exit(json_encode(array( 'state' => 0, 'content' => $error, 'time' => 10 ))); } if ( !headers_sent() ) { header('Content-Type: text/html; charset=' . ZOTOP_CHARSET, TRUE, ($e instanceof zotop_exception) ? $code : 500); } if ( ZOTOP_DEBUG ) { ob_start(); include ZOTOP_PATH_LIBRARIES . DS . 'views' . DS . 'error.php'; echo ob_get_clean(); exit(1); } exit($error); } catch (Exception $e) { ob_get_level() and ob_clean(); echo zotop_exception::text($e), "\n"; exit(1); } } } defined('ZOTOP') or die('No direct script access.'); class router { public static $rules = array(); public static function init() { if (empty(router::$rules)) { $rules = zotop::cache('zotop.router'); if (empty($rules)) { $url_router = c('router'); foreach ((array )$url_router as $pattern => $route) { if (! $pattern or ! $route) continue; $pattern = router::regex($pattern); $rules[$pattern] = router::parse($pattern, $route); } zotop::cache('zotop.router', $rules, false); } router::$rules = is_array($rules) ? $rules : array(); } } public static function regex($str) { $str = str_replace(':any', ':[^\/]+', $str); $str = str_replace(':num', ':\d+', $str); $str = str_replace(':str', ':\w+', $str); return $str; } public static function parse($pattern, $route) { $route = trim($route, '/'); $host = ! strncasecmp($pattern, 'http://', 7) || ! strncasecmp($pattern, 'https://', 8); $references = array(); if (strpos($route, '<') !== false && preg_match_all('/<(\w+)>/', $route, $matches2)) { foreach ($matches2[1] as $name) { $references[$name] = "<$name>"; } } $tr2['/'] = $tr['/'] = '\\/'; $params = array(); if (preg_match_all('/<(\w+):?(.*?)?>/', $pattern, $matches)) { $tokens = array_combine($matches[1], $matches[2]); foreach ($tokens as $name => $value) { if ($value === '') $value = '[^\/]+'; $tr["<$name>"] = "(?P<$name>$value)"; if (isset($references[$name])) { $tr2["<$name>"] = $tr["<$name>"]; } else { $params[$name] = $value; } } } $template = preg_replace('/<(\w+):?.*?>/', '<$1>', $pattern); $route_regex = '/^' . strtr($template, $tr) . '\/$/u'; if ($references) { $create_regex = '/^' . strtr($route, $tr2) . '$/u'; } return array( 'route' => $route, 'references' => $references, 'host' => $host, 'params' => $params, 'template' => $template, 'route_regex' => $route_regex, 'create_regex' => $create_regex, ); } public static function route() { $uri = zotop::$uri; foreach (router::$rules as $pattern => $rule) { if (($r = router::parseUrl($pattern, $rule, $uri, zotop::$uri)) !== false) { $uri = $r; break; } } zotop::$uri = $uri; } public static function parseUrl($pattern, $route, $uri, $rawuri) { $uri = trim($uri, '/') . '/'; if (preg_match($route['route_regex'], $uri, $matches)) { $tr = array(); foreach ($matches as $key => $value) { if (isset($route['references'][$key])) { $tr[$route['references'][$key]] = $value; } else if (isset($route['params'][$key])) { $_REQUEST[$key] = $_GET[$key] = $value; } } if ($route['create_regex'] !== null) { return strtr($route['route'], $tr); } return $route['route']; } return false; } public static function url() { } public static function createUrl($pattern, $route, $uri, $params) { if (empty($uri)) return false; $tr = array(); if ($uri !== $route['route']) { if ($route['create_regex'] !== null && preg_match($route['create_regex'], $uri, $matches)) { foreach ($route['references'] as $key => $name) { $tr[$name] = $matches[$key]; } } else { return false; } } if ($params and empty($route['params'])) return false; foreach ($route['params'] as $key => $rule) { if (isset($params[$key]) and preg_match('/\A' . $rule . '\z/u', $params[$key])) { $tr["<$key>"] = urlencode($params[$key]); unset($params[$key]); } else { return false; } } $url = strtr($route['template'], $tr); if ($params and is_array($params)) { $url .= '?' . http_build_query($params); } if ($route['host']) { $host = request::host(); if (stripos($url, $host) === 0) { $url = substr($url, strlen($host)); } } return $url; } } defined('ZOTOP') or die('No direct access allowed.'); class controller { protected $template = null; protected $template_vars = array(); public $default_action = 'index'; public function __construct() { } public function __init() { } public function __empty($action = '', $arguments = array()) { throw new zotop_exception(t('未能找到相应的动作 %s，请检查控制器中动作是否存在？', $action), 404); } protected function template() { if (!$this->template) { $this->template = zotop::instance('template'); } if ($this->template_vars and is_array($this->template_vars)) { $this->template->assign($this->template_vars); } return $this->template; } protected function assign($name = '', $value = '') { if ($name === '') { return $this->template_vars; } elseif ($name === null) { $this->template_vars = array(); } elseif (is_array($name) or is_object($name)) { foreach ($name as $key => $val) { $this->template_vars[$key] = $val; } } elseif ($value === '') { return isset($this->template_vars[$name]) ? $this->template_vars[$name] : null; } elseif ($value === null) { unset($this->template_vars[$name]); } else { $this->template_vars[$name] = $value; } return $this; } public function __set($name, $value) { $this->assign($name, $value); } public function __get($name) { return $this->assign($name); } protected function display($template = '', $content_type = '', $charset = '') { $this->template()->display($template, $content_type, $charset); } public function post() { if ($_SERVER['REQUEST_METHOD'] == 'POST') { if ((empty($_SERVER['HTTP_REFERER']) || preg_replace("/https?:\/\/([^\:\/]+).*/i", "\\1", $_SERVER['HTTP_REFERER']) == preg_replace("/([^\:]+).*/", "\\1", $_SERVER['HTTP_HOST']))) { return empty($_POST) ? true : $_POST; } throw new zotop_exception(t('invalid submit')); } return false; } public function redirect($url) { if ( $url and !headers_sent() ) { header("location:{$url}"); exit(); } } public function error($content, $time = 3) { $this->message(array( 'state' => false, 'content' => $content, 'time' => $time )); } public function success($content, $url = null, $time = 2) { $this->message(array( 'state' => true, 'content' => $content, 'url' => $url, 'time' => $time )); } public function message(array $msg) { ob_clean(); if (strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' or strtolower($_REQUEST['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') { exit(json_encode($msg)); } $this->assign($msg); $this->display("system/message.php"); exit(1); } public function _404($content) { header('HTTP/1.1 404 Not Found'); header('Status: 404 Not Found'); $this->assign('content', $content); $this->display("system/404.php"); } } defined('ZOTOP') or die('No direct script access.'); class model { protected $db = null; protected $dbconfig = 'default'; protected $table = ''; protected $alias = ''; protected $pk = 'id'; protected $fields = array(); protected $data = array(); protected $error = null; public function __construct() { if ( !is_object($this->db) ) $this->db = zotop::db($this->dbconfig); } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { return isset($this->data[$name]) ? $this->data[$name] : null; } public function __isset($name) { return isset($this->data[$name]); } public function __unset($name) { unset($this->data[$name]); } public function data($name='', $value=null) { if ( $name === null ) return ( $this->data = array() ); if ( empty($name) ) return $this->data; if ( is_array($name) ) { $this->data = array_merge($this->data, $name); } if ( is_string($name) ) { if ( $value === null ) { return $this->data[$name]; } $this->data[$name] = $value; } return $this->data; } public function pk() { if( empty($this->pk) ) { $this->pk = $this->db->table($this->table)->pk(); } return $this->pk; } public function fields($refresh=false) { if( $this->fields && is_array($this->fields) && $refresh === false ) { return $this->fields; } if ( $refresh === false and $this->fields = zotop::cache("{$this->table}.fields") ) { return $this->fields; } if ( $fields = $this->db->table($this->table)->fields() ) { $this->fields = array_keys($fields); zotop::cache("{$this->table}.fields", $this->fields); return $this->fields; } return array(); } public function error($error = '') { if ( empty($error) ) { if ( empty($this->error) ) return false; return $this->error; } $this->error = $error; return false; } public function alias($alias) { $this->alias = $alias; return $this; } public function db() { $table = $this->table; if ( is_string($this->alias) && !empty($this->alias) ) { $table = $table.' AS '.$this->alias; $this->alias=''; } return $this->db->from($table); } public function begin() { return $this->db->begin(); } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getAll() { return $this->db()->getAll(); } public function getRow() { return $this->db()->getRow(); } public function getField($field) { return $this->db()->select($field)->orderby(null)->getField(); } public function getPage($page=0, $pagesize=20, $total = false) { return $this->db()->getPage($page,$pagesize,$total); } public function get($id, $field='') { static $data = array(); if ( !isset($data[$id]) ) { $data[$id] = $this->where($this->pk(), '=', $id)->getRow(); } return empty($field) ? $data[$id] : $data[$id][$field]; } public function cache($refresh=false) { return $this->getall(); } public function _filter_data($data, $method='') { if ( is_array($data) ) { foreach( $data as $key=>$field ) { if ( !in_array(strtolower($key), $this->fields()) ) { unset($data[$key]); } } unset($keys); } else { $data = array(); } return $data; } public function insert($data='', $replace=false) { if ( $data === true or $data === false ) { $replace = $data;$data=array(); } if ( empty($data) ) { $data = empty($this->data) ? $this->db->set() : $this->data; } if ( false === $this->_before_insert($data, $replace) ) { return false; } if ( $insertdata = $this->_filter_data($data) ) { if ( false !== $insertid = $this->db()->set(null)->set($insertdata)->insert($replace) ) { if ( $insertid !== true ) $data[$this->pk()] = $insertid; $this->_after_insert($data,$replace); return $data[$this->pk()]; } } return false; } protected function _before_insert(&$data,$where) {} protected function _after_insert(&$data,$where) {} public function update($data=array(), $where = '') { if ( !is_array($data) or empty($data) ) { $data = empty($this->data) ? $this->db->set() : $this->data; } if ( empty($where) ) { $where = isset($data[$this->pk()]) ? array($this->pk(),'=',$data[$this->pk()]) : $this->db->where(); } elseif( is_numeric($where) or is_string($where) ) { $where = array($this->pk(),'=',$where); } if ( false === $this->_before_update($data, $where) ) { return false; } if ( $updatedata = $this->_filter_data($data) ) { if ( $this->db()->set(null)->set($updatedata)->where(null)->where($where)->update() ) { $this->_after_update($data, $where); return true; } return false; } return true; } protected function _before_update(&$data,$where) {} protected function _after_update(&$data,$where) {} public function delete($where = '') { if ( empty($where) ) { if ( !empty($this->data[$this->pk()]) ) { $data[$this->pk()] = $this->data[$this->pk()]; $where = array($this->pk(),'=',$this->data[$this->pk()]); } else { $where = $this->db->where(); } } elseif( is_numeric($where) or is_string($where) ) { $data[$this->pk()] = $where; $where = strpos($options,',') ? array($this->pk(),'IN',$where) : array($this->pk(),'=',$where); } if(false === $this->_before_delete($data,$where)) { return false; } if ( $this->db()->where(null)->where($where)->delete() ) { $this->_after_delete($data,$where); return true; } return false; } protected function _before_delete($data,$where) {} protected function _after_delete($data,$where) {} public function exists() { return $this->count() ? true : false; } public function __call($method, $args) { $method = strtolower($method); if ( in_array($method, array('distinct','select','set','join','where','orderby','having','groupby','limit','offset'),true) ) { call_user_func_array(array($this->db, $method), $args); return $this; } elseif( substr($method, 0, 5) == 'getby' ) { $field = substr($method,5); if ( in_array($field, $this->fields()) ) { return $this->db()->where($field,'=', $args[0])->getRow(); } } elseif( substr($method, 0, 8) == 'deleteby' ) { $field = substr($method,8); if ( in_array($field, $this->fields()) ) { return $this->db()->where($field, '=', $args[0])->delete(); } } elseif ( in_array($method, array('count','sum','min','max','avg'), true) ) { $field = isset($args[0]) ? $args[0] : '*'; $result = $this->getField(strtoupper($method).'('.$field.') AS zotop_'.$method); return is_numeric($result) ? $result : 0; } throw new zotop_exception(t('Method [ %s ] not exists', $method)); } } defined('ZOTOP') or die('No direct access allowed.'); class template { public $vars = array(); public $theme = null; protected static $tags = array(); public function __construct( $theme=null ) { if ( defined('ZOTOP_THEME') ) $this->theme = ZOTOP_THEME; if ( $theme ) $this->theme = $theme; if ( $this->theme ) { define('__THEME__', ZOTOP_URL_THEMES.'/'.$this->theme); } } public static function tag($tag = null, $callback = '') { if ($tag == null) return template::$tags; if (is_string($tag)) { template::$tags[$tag] = empty($callback) ? "tag_{$tag}" : $callback; } if (is_array($tag)) { foreach ($tag as $t => $c) { template::tag($t, $c); } } return template::$tags; } public function find_template($template = '') { $template = rtrim(str_replace('/', DS, $template), DS); if ( strpos($template, ZOTOP_PATH) === false ) { $template = empty($template) ? ZOTOP_APP . DS . ZOTOP_CONTROLLER . '_' . ZOTOP_ACTION . '.php' : $template; if ( $this->theme and file_exists(ZOTOP_PATH_THEMES . DS . $this->theme . DS . 'templates' . DS . $template)) { $template = ZOTOP_PATH_THEMES . DS . $this->theme . DS . 'templates' . DS . $template; } else { $app = 'system'; if ( $i = strpos($template, DS) ) { $app = substr($template, 0, $i); $template = substr($template, $i + 1); } $template = A("{$app}.path") . DS . 'templates' . DS . $template; } } return $template; } public function compile_template($template = '') { $template = format::path($this->find_template($template)); $compile_template = ZOTOP_PATH_RUNTIME . DS . 'templates' . DS . substr(str_replace(DS, '.', $template), strlen(ZOTOP_PATH) + 1); if (ZOTOP_DEBUG or !file_exists($compile_template) or @filemtime($template) > @filemtime($compile_template)) { if ($data = @file_get_contents($template)) { $data = $this->parse($data); if (false === @file_put_contents($compile_template, $data)) { throw new zotop_exception(t("The dir [%s] is not exist or not writable", debug::path(dirname($compile_template)))); } @chmod($compile_template, 0774); return $compile_template; } throw new zotop_exception(t('The file [ %s ] not exist', debug::path($template)), 404); } return $compile_template; } public function addquote($var) { return str_replace("\\\"", "\"", preg_replace("/\[([a-zA-Z0-9_\-\.\x7f-\xff]+)\]/s", "['\\1']", $var)); } public function parse($str) { $str = preg_replace("/([\n\r]+)\t+/s", "\\1", $str); $str = preg_replace("/\<\!\-\-\{(.+?)\}\-\-\>/s", "{\\1}", $str); $str = preg_replace("/\<\!\-\-#.+?#\-\-\>/s", "", $str); $str = zotop::filter('template.parse', $str, $this); $str = preg_replace("/\{(.+?)\}/es", "\$this->_tag('\\1')", $str); $str = preg_replace("/\{php\s+(.+)\}/i", "<?php \\1?>", $str); $str = preg_replace("/\{template\s+(.+)\}/i", '<?php $this->display(\\1); ?>', $str); $str = preg_replace("/\{include\s+(.+)\}/i", '<?php zotop::load(\\1); ?>', $str); $str = preg_replace("/\{hook\s+(.+)\}/i", '<?php zotop::run(\\1, $this); ?>', $str); $str = preg_replace("/\{if\s+(.+?)\}/i", "<?php if(\\1):?>", $str ); $str = preg_replace("/\{else\}/i", "<?php else: ?>", $str); $str = preg_replace("/\{elseif\s+(.+?)\}/i", "<?php elseif(\\1):?>", $str ); $str = preg_replace("/\{\/if\}/i", "<?php endif; ?>", $str); $str = preg_replace("/\{loop\s+(\S+)\s+(\S+)\}/i", "<?php \$n=1; foreach(\\1 as \\2): ?>", $str); $str = preg_replace("/\{loop\s+(\S+)\s+(\S+)\s+(\S+)\}/i", "<?php \$n=1; foreach(\\1 as \\2 => \\3): ?>", $str); $str = preg_replace("/\{\/loop\}/i", "<?php \$n++;endforeach;unset(\$n); ?>", $str); $str = preg_replace("/\{([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff:]*\(.*?\))\}/", "<?php echo \\1;?>", $str); $str = preg_replace("/\{([A-Z_\x7f-\xff][A-Z0-9_\x7f-\xff]*)\}/s", "<?php echo \\1;?>", $str); $str = preg_replace("/\{for\s+(.+?)\}/i", "<?php for( \\1 ): ?>", $str); $str = preg_replace("/\{\/for\}/i", "<?php endfor; ?>", $str); $str = preg_replace("/\{(\\$[a-zA-Z0-9_\[\]\'\"\$\x7f-\xff]+)\}/es", "\$this->addquote('<?php echo \\1;?>')", $str); $str = preg_replace("/\{(\\\$[a-zA-Z0-9_\-\>\[\]\'\"\$\.\x7f-\xff]+)\}/s", "<?php echo \\1;?>", $str); $str = preg_replace("/\{\+\+\\$(.+?)\}/", "<?php ++$\\1; ?>", $str); $str = preg_replace("/\{\-\-\\$(.+?)\}/", "<?php ++$\\1; ?>", $str); $str = preg_replace("/\{\\$(.+?)\+\+\}/", "<?php $\\1++; ?>", $str); $str = preg_replace("/\{\\$(.+?)\-\-\}/", "<?php $\\1--; ?>", $str); $str = preg_replace("/\{(\(.*?\))\}/", "<?php echo \\1;?>", $str); if ($tag = template::tag()) { $str = preg_replace('/\{(' . implode('|', array_keys($tag)) . ')(\s+[^}]+?)(\/?)\}/ie', "\$this->_beginTag('\\0','\\1', '\\2', '\\3')", $str); $str = preg_replace('/\{\/(' . implode('|', array_keys($tag)) . ')\}/ie', "\$this->_endTag('\\1')", $str); } return "<?php defined('ZOTOP') or exit('No permission resources.'); ?>\r\n" . $str; } public function _tag($str) { $var = '[a-zA-Z0-9_]+'; $str = stripslashes($str); $str = preg_replace("/\\\$(".$var.")\.(".$var.")\.(".$var.")\.(".$var.")/", "$\\1['\\2']['\\3']['\\4']", $str); $str = preg_replace("/\\\$(".$var.")\.(".$var.")\.(".$var.")/", "$\\1['\\2']['\\3']", $str); $str = preg_replace("/\\\$(".$var.")\.(".$var.")/", "$\\1['\\2']", $str); return '{'.$str.'}'; } public function _attrs($str) { $attrs = array(); preg_match_all('/\s+([a-z_]+)\s*\=\s*\"(.*?)\"/i', stripslashes($str), $matches, PREG_SET_ORDER); foreach ($matches as $k => $v) { $attrs[$v[1]] = $v[2]; } return $attrs; } public function _beginTag($html, $tag, $str, $end) { preg_match_all('/\s+([a-z_]+)\s*\=\s*\"(.*?)\"/i', stripslashes($str), $matches, PREG_SET_ORDER); $callback = template::$tags[$tag]; $newline = "\r\n"; if ( function_exists($callback) ) { foreach ($matches as $k => $v) { if (in_array($v[1], array('return', 'cache'))) { $$v[1] = $v[2]; continue; } $attrs[$v[1]] = $v[2]; } $cache = isset($cache) && intval($cache) ? intval($cache) : $cache; $return = isset($return) && trim($return) ? trim($return) : 'r'; if ( $cache ) { $code .= $newline.'if ( null === $' . $callback . ' = zotop::cache(\'' .$tag . md5(stripslashes($html)). '\') ):'; $code .= $newline.'	if ( $' . $callback . ' = ' . $callback . '(' . $this->array_attrs($attrs) . ') ) :'; $code .= $newline.'		zotop::cache(\'' .$tag . md5(stripslashes($html)). '\', $' . $callback . ', ' . $cache . ');'; $code .= $newline.'	endif;'; $code .= $newline.'endif;'; } else { $code .= $newline.'$' . $callback . ' = ' . $callback . '(' . $this->array_attrs($attrs) . ');'; } if ( $end ) { $code .= ($return=='r') ? '' : $newline.'$' . $return . ' = $'.$callback.';'; } else { $code .= $newline.'if ( is_array($' . $callback . ') ):'; $code .= $newline.'	if ( isset($' . $callback . '[\'total\']) ){extract($' . $callback . ');$' . $callback . ' = $data; $pagination = pagination::instance($total,$pagesize,$page);}'; $code .= $newline.'	$n=0;'; $code .= $newline.'	foreach( $' . $callback . ' as $key=>$'.$return.' ):'; } } return '<?php'. $code . $newline . '?>'; } public function _endTag($tag) { $newline = "\r\n"; $code .= $newline.'	$n++;'; $code .= $newline.'	endforeach;'; $code .= $newline.'endif;'; return '<?php' . $code . $newline .'?>'; } private function array_attrs($attrs) { if (is_array($attrs)) { $str = 'array('; foreach ($attrs as $key => $val) { if (is_array($val)) { $str .= "'$key'=>" . $this->array_attrs($val) . ","; } else { if (strpos($val, '$') === 0) { $str .= "'$key'=>$val,"; } else { $str .= "'$key'=>'" . addslashes($val) . "',"; } } } return trim($str, ',') . ')'; } return false; } public function assign($name = '', $value = '') { if ($name === '') { return $this->vars; } elseif ($name === null) { $this->vars = array(); } elseif (is_array($name) or is_object($name)) { foreach ($name as $key => $val) { $this->vars[$key] = $val; } } elseif ($value === '') { return isset($this->vars[$name]) ? $this->vars[$name] : null; } elseif ($value === null) { unset($this->vars[$name]); } else { $this->vars[$name] = $value; } return $this; } public function render($_template='') { if ( $_template = $this->compile_template($_template) ) { ob_start(); ob_implicit_flush(0); extract($this->vars, EXTR_OVERWRITE); include $_template; $content = ob_get_clean(); return $content; } return null; } public function display($template = '', $content_type = 'text/html', $charset = ZOTOP_CHARSET) { header('Content-Type:' . $content_type . '; charset=' . $charset); header('Cache-control: no-cache'); header('X-Powered-By:zotop'); echo $this->render($template); } } defined('ZOTOP') or die('No direct script access.'); class form { public static function attributes($key, $value = null) { $str = ''; if ( empty($key) ) return ''; if ( is_string($key) ) { if( in_array($key, array('required','checked','selected')) ) { if ( empty($value) ) return ''; } if( $value === null ) { return ''; } elseif ( is_string($value) ) { return ' '.$key.'="'.htmlspecialchars($value, ENT_QUOTES, 'UTF-8').'"'; } elseif( is_numeric($value) ) { return ' '.$key.'="'.$value.'"'; } elseif( is_bool($value) ) { return ' '.$key.'="'.($value ? 'true' : 'false').'"'; } } if ( is_array($key) ) { foreach ( $key as $k=>$v ) { $str .= form::attributes($k, $v); } } return $str; } public static function options($options, $s1 = "\n", $s2 = '|') { if( is_array($options) ) return $options; $os = array(); $options = explode($s1, $options); foreach($options as $option) { if(strpos($option, $s2)) { list($name, $value) = explode($s2, trim($option)); } else { $name = $value = trim($option); } $os[$value] = $name; } return $os; } public static function header($form=array()) { if ( is_string($form) ) { $form = array('action'=>$form); } $form = $form + array('class'=>'form','method'=>'post','action'=>request::url()); return '<form'.form::attributes($form).' novalidate>'."\n"; } public static function footer() { return '</form>'."\n"; } public static function label($text, $for, $required=false) { return '<label class="field-label'.($required ? ' required' : '').'" for="'.$for.'">'.$text.($required ? '<b class="required">*</b>' : '').'</label>'; } public static function tips($tips) { return empty($tips) ? '' : '<span class="field-tips">'.$tips.'</span>'; } public static function field($field, $callback='') { static $fields = array(); if ( is_string($field) and !empty($callback) ) { $field = strtolower($field); if ( $callback == '?' ) { return ( !empty($fields[$field]) or method_exists('form',"field_{$field}") ); } return ( $fields[$field] = $callback ); } elseif ( is_array($field) ) { $field['id'] = empty($field['id']) ? $field['name'] : $field['id']; $field['id'] = str_replace(array('.',']',' ','/','\\'), '', str_replace('[', '-', $field['id'])); $field['type'] = empty($field['type']) ? 'text' : $field['type']; $field['class'] = empty($field['class']) ? str_replace(',',' ',$field['type']) : str_replace(',',' ',$field['type']).' '.$field['class']; if ( $field['required'] ) { $field['class'] = $field['class'].' required'; unset($field['required']); } $types = explode(',',$field['type']); unset($field['type']); foreach($types as $type) { if ( $callback = $fields[strtolower($type)] ) { return call_user_func_array($callback, array($field)); } if ( $type = "field_{$type}" and method_exists('form',$type) ) { return form::$type($field); } } return form::field_text($field);; } return false; } public static function field_text($attrs) { $attrs['type'] = empty($attrs['type']) ? 'text' : $attrs['type']; $attrs['class'] = empty($attrs['class']) ? 'text' : 'text '.$attrs['class']; return '<input'.form::attributes($attrs).'/>'; } public static function field_hidden($attrs) { $attrs['type'] = 'hidden'; return form::field_text($attrs); } public static function field_password($attrs) { $attrs['type'] = 'password'; return form::field_text($attrs); } public static function field_number($attrs) { return form::field_text($attrs); } public static function field_upload($attrs) { $attrs['type'] = 'file'; $attrs['name'] = empty($attrs['name']) ? 'filedata' : $attrs['name']; return form::field_text($attrs); } public static function field_textarea($attrs) { $value = $attrs['value'];unset($attrs['value']); $attrs['class'] = empty($attrs['class']) ? 'textarea' : 'textarea '.$attrs['class']; return '<textarea'.form::attributes($attrs).'>'.htmlspecialchars((string)$value, ENT_QUOTES, 'UTF-8').'</textarea>'; } public static function field_editor($attrs) { return form::field_textarea($attrs); } public static function field_bool($attrs) { $attrs['type'] = 'radio'; $attrs['options'] = array( 1 => t('是'), 0 => t('否') ); return form::field($attrs); } public static function field_radio($attrs) { @extract($attrs); $options = form::options($options); $value = isset($value) ? $value : reset(array_keys($options)); $html = array(''); if ( is_array($options) ) { $n = count($options); $html[] = '<div class="radios '. ( $column > 0 ? 'block-radios' : 'inline-radios' ).'">'; $html[] = '<div>'; $i = 1; foreach($options as $val=>$text) { $checked = ( $val == $value ) ? ' checked="checked"' : ''; $html[] = '<label>'; $html[] = '	<input type="radio" name="'.$name.'" id="'.str_replace(']', '', str_replace('[', '-', $name)).'-'.$val.'" class="radio" value="'.$val.'"'.$checked.'/>'; $html[] = '	'.$text; $html[] = '</label>'; if ( $column > 0 and $i%$column == 0 ) { $html[] = '</div>'; $html[] = '<div>'; } $i++; } $html[] = '</div>'; $html[] = '</div>'; $html[] = '<label for="'.$name.'" class="error" generated="generated"></label>'; } return implode("\n",$html); } public static function field_checkbox($attrs) { @extract($attrs); $options = form::options($options); $html = array(''); if(is_array($options)) { $n = count($options); $html[] = '<div class="checkboxes '. ( $column > 0 ? 'block-checkboxes' : 'inline-checkboxes' ).'">'; $html[] = '<div>'; $i = 1; foreach($options as $val=>$text) { $checked = in_array($val,(array)$value) ? ' checked="checked"' : ''; $html[] = '<label>'; $html[] = '	<input type="checkbox" name="'.$name.'[]" id="'.$name.'-item'.$i.'" class="radio" value="'.$val.'"'.$checked.'/>'; $html[] = '	'.$text; $html[] = '</label>'; if ( $column > 0 AND $i%$column == 0 ) { $html[] = '</div>'; $html[] = '<div>'; } $i++; } $html[] = '</div>'; $html[] = '</div>'; $html[] = '<label for="'.$name.'" class="error" generated="generated"></label>'; } return implode("\n",$html); } public static function field_select($attrs) { $options = form::options($attrs['options']); $value = $attrs['value']; if ( is_array($value) ) { $attrs['multiple'] = 'multiple'; $attrs['class'] = $attrs['class'].' multiple'; } else { $value = array($value); } unset($attrs['options'],$attrs['value']); $html[] = $attrs['multiple'] ? '<div class="select multiple-select">' : '<div class="select single-select">'; $html[] = '<select'.form::attributes($attrs).'>'; if( is_array($options) ) { foreach($options as $val=>$option) { if ( is_array($option) ) { $html[] = '<optgroup label="'.$val.'">'; foreach( $option as $val=>$opt ) { $selected = in_array($val,$value) ? ' selected="selected"' : ''; $html[] = '	<option value="'.$val.'"'.$selected.'>'.$opt.'</option>'; } $html[] = '</optgroup>'; } else { $selected = in_array($val,$value) ? ' selected="selected"' : ''; $html[] = '	<option value="'.$val.'"'.$selected.'>'.$option.'</option>'; } } } $html[] = '</select>'; $html[] = '</div>'; return implode("\n",$html); } public static function field_button($attrs) { $attrs['type'] = 'button'; $attrs['class'] = empty($attrs['class']) ? 'btn' : 'btn '.$attrs['class']; $value = $attrs['value'];unset($attrs['value']); return '<button'.form::attributes($attrs).'>'.htmlspecialchars((string)$value, ENT_QUOTES, 'UTF-8').'</button>'; } public static function field_submit($attrs) { $attrs['type'] = 'submit'; $attrs['class'] = empty($attrs['class']) ? 'btn btn-highlight' : 'btn btn-highlight '.$attrs['class']; $attrs += array ( 'id'=>'submitform', 'value'=>t('提交') ); $value = $attrs['value'];unset($attrs['value']); return '<button'.form::attributes($attrs).'>'.htmlspecialchars((string)$value, ENT_QUOTES, 'UTF-8').'</button>'; } public static function field_timezone($attrs) { $attrs['type'] = 'select'; $attrs['options'] = include(ZOTOP_PATH_LIBRARIES.DS.'resources'.DS.'timezone.php'); return form::field($attrs); } public static function field_language($attrs) { $attrs['type'] = 'select'; $attrs['options'] = array('zh-cn'=>t('简体中文')); return form::field($attrs); } } defined('ZOTOP') or die('No direct script access.'); class request { public static function referer() { return isset($_GET['referer']) ? $_GET['referer'] : (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : null); } public static function protocol() { return (isset($_SERVER['HTTPS']) && ! strcasecmp($_SERVER['HTTPS'], 'on')) ? 'https' : 'http'; } public function port() { $default = (request::protocol() == 'http') ? 80 : 443; return isset($_SERVER['SERVER_PORT']) ? (int)$_SERVER['SERVER_PORT'] : $default; } public static function host() { static $host = null; if ($host === null) { $http = request::protocol(); if (isset($_SERVER['HTTP_HOST'])) { $host = $http . '://' . $_SERVER['HTTP_HOST']; } else { $host = $http . '://' . $_SERVER['SERVER_NAME']; $port = request::port(); if (($port !== 80 && $http == 'http') || ($port !== 443 && $http == 'https')) { $host .= ':' . $port; } } } return $host; } public static function scriptname() { static $scriptname = null; if ($scriptname === null) { $filename = basename($_SERVER['SCRIPT_FILENAME']); if (basename($_SERVER['SCRIPT_NAME']) === $filename) { $scriptname = $_SERVER['SCRIPT_NAME']; } elseif (basename($_SERVER['PHP_SELF']) === $filename) { $scriptname = $_SERVER['PHP_SELF']; } elseif (isset($_SERVER['ORIG_SCRIPT_NAME']) && basename($_SERVER['ORIG_SCRIPT_NAME']) === $filename) { $scriptname = $_SERVER['ORIG_SCRIPT_NAME']; } elseif (($pos = strpos($_SERVER['PHP_SELF'], '/' . $filename)) !== false) { $scriptname = substr($_SERVER['SCRIPT_NAME'], 0, $pos) . '/' . $filename; } elseif (isset($_SERVER['DOCUMENT_ROOT']) && strpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['DOCUMENT_ROOT']) === 0) { $scriptname = str_replace('\\', '/', str_replace($_SERVER['DOCUMENT_ROOT'], '', $_SERVER['SCRIPT_FILENAME'])); } } return $scriptname; } public static function basepath() { static $basepath = null; if ($basepath === null) { $filename = basename($_SERVER['SCRIPT_FILENAME']); $scriptname = request::scriptname(); if (empty($scriptname)) { $basepath = ''; } elseif (basename($scriptname) === $filename) { $basepath = dirname($scriptname); } else { $basepath = $scriptname; } if ('\\' === DIRECTORY_SEPARATOR) { $basepath = str_replace('\\', '/', $basepath); } } return $basepath; } public static function url($host = true) { static $uri = null; if ($uri === null) { if (isset($_SERVER['HTTP_X_REWRITE_URL'])) { $uri = $_SERVER['HTTP_X_REWRITE_URL']; } elseif (isset($_SERVER['REQUEST_URI'])) { $uri = $_SERVER['REQUEST_URI']; if (isset($_SERVER['HTTP_HOST'])) { if (strpos($uri, $_SERVER['HTTP_HOST']) !== false) { $uri = preg_replace('/^\w+:\/\/[^\/]+/', '', $uri); } } else { $uri = preg_replace('/^(http|https):\/\/[^\/]+/i', '', $uri); } } elseif (isset($_SERVER['ORIG_PATH_INFO'])) { $uri = $_SERVER['ORIG_PATH_INFO']; if (! empty($_SERVER['QUERY_STRING'])) { $uri .= '?' . $_SERVER['QUERY_STRING']; } } } return $host ? request::host() . $uri : $uri; } public static function ip() { static $ip = null; if ($ip === null) { if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown', $arr); if (false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); } elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } else { $ip = '0.0.0.0'; } } return $ip; } } defined('ZOTOP') OR die('No direct access allowed.'); class format { public static function size($size,$len=2) { $len = (is_numeric($len) && $len > 0) ? $len : 2; $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB'); $pos=0; while ($size >= 1024) { $size /= 1024; $pos++; } return number_format($size,$len).' '.$units[$pos]; } public static function path($path) { $path = preg_replace('#[/\\\\]+#', DIRECTORY_SEPARATOR, $path); $path = rtrim($path,DIRECTORY_SEPARATOR); return $path; } public static function url($url) { $url = str_replace("\\", "/", $url); $url = preg_replace("#(^|[^:])//+#", "\\1/", $url); return $url; } public static function js($string) { return addslashes(str_replace(array("\r", "\n"), array('', ''), $string)); } public static function textarea($string) { return format::nl2p(str_replace(' ', '&nbsp;', htmlspecialchars($string))); } public static function nl2p($string) { $string = trim(str_replace(array('<p>', '</p>', '<br>', '<br/>','<br />'), '', $string)); $string = '<p>'.preg_replace("/([\n]{1,})/i", "</p>\n<p>", $string).'</p>'; $string = str_replace(array('<p><br/></p>','<p></p>'), '', $string); return $string; } public static function date($timestamp, $format=null, $timeoffset=null) { if ( empty($timestamp) ) return ''; static $offset,$dateformat,$timeformat; if ( $offset == null ) { $offset = c('system.locale_timezone'); $dateformat = c('system.locale_date'); $timeformat = c('system.locale_time'); } $timeoffset = ( $timeoffset === null ) ? $offset : $timeoffset; $timestamp = $timestamp + $timeoffset * 3600; $format = empty($format) || $format == 'datetime' ? $dateformat.' '.$timeformat : ($format == 'date' ? $dateformat : ($format == 'time' ? $timeformat : $format)); if( $format[0] == 'u' ) { $uformat = substr($format,2); $uformat = empty($uformat) || $uformat == 'datetime' ? $dateformat.' '.$timeformat : ($uformat == 'date' ? $dateformat : ($uformat == 'time' ? $timeformat : $uformat)); $todaytimestamp = TIME - (TIME + $timeoffset * 3600) % 86400 + $timeoffset * 3600; $s = gmdate($uformat, $timestamp); $time = TIME + $timeoffset * 3600 - $timestamp; if( $timestamp >= $todaytimestamp ) { if( $time > 3600 ) { return '<span title="'.$s.'">'.intval($time / 3600).'&nbsp;'.t('小时').t('前').'</span>'; } elseif( $time > 1800 ) { return '<span title="'.$s.'">'.t('半').t('小时').t('前').'</span>'; } elseif( $time > 60 ) { return '<span title="'.$s.'">'.intval($time / 60).'&nbsp;'.t('分钟').t('前').'</span>'; } elseif( $time > 0 ) { return '<span title="'.$s.'">'.$time.'&nbsp;'.t('秒').t('前').'</span>'; } elseif( $time == 0 ) { return '<span title="'.$s.'">'.t('刚刚').'</span>'; } else { return $s; } } elseif(($days = intval(($todaytimestamp - $timestamp) / 86400)) >= 0 && $days < 7) { if( $days == 0 ) { return '<span title="'.$s.'">'.t('昨天').'&nbsp;'.gmdate('H:i', $timestamp).'</span>'; } elseif( $days == 1 ) { return '<span title="'.$s.'">'.t('前天').'&nbsp;'.gmdate('H:i', $timestamp).'</span>'; } else { return '<span title="'.$s.'">'.($days + 1).'&nbsp;'.t('天').t('前').'</span>'; } } else { return $s; } } return gmdate($format, $timestamp); } public static function regex($regex) { $regex = str_replace(':any','.+',$regex); $regex = str_replace(':num','[0-9]+',$regex); return $regex; } public static function id($id) { if ( is_numeric( $id ) ) return $id; if ( is_array( $id ) ) return array_filter( $id, "is_numeric" ); if ( strpos( $id, "," ) !== FALSE ) { return preg_match( "/^([\\d]+,)+\$/", $id."," ) ? explode( ",", $id ) : false; } return false; } } defined('ZOTOP') OR die('No direct access allowed.'); class file { public static function ext($file) { return strtolower(trim(substr(strrchr($file, '.'), 1, 10))); } public static function name($file, $stripext = false) { $name = basename($file); if ( $stripext ) { $ext = file::ext($file); $name = basename($file,'.'.$ext); } return $name; } public static function exists($file) { static $exists = array(); if ( empty($file) ) return false; $file = format::path($file); if ( !isset($exists[$file]) ) { $exists[$file] = @is_file($file); } return $exists[$file]; } public static function size($file,$format=false) { $file = format::path($file); $size = @filesize($file); return $format ? format::byte($size, $format) : $size; } public static function time($file, $ctime=false) { return $ctime ? filectime(format::path($file)) : filemtime(format::path($file)); } public static function isUTF8($file) { $str = file::get($file); if ( $str === mb_convert_encoding(mb_convert_encoding($str, "UTF-32", "UTF-8"), "UTF-8", "UTF-32") ) { return true; } else { return false; } } public static function get($file) { $file = format::path($file); if ( file_exists($file) ) { return file_get_contents($file); } return false; } public static function cleanup_header_comment($str) { return trim(preg_replace("/\s*(?:\*\/|\?>).*/", '', $str)); } public static function info($file, $headers=array(), $context = '') { $file = format::path($file); if ( !file_exists($file) ) return array(); if ( empty($headers) ) { $headers = array( 'name'=>'name', 'title'=>'title', 'description'=>'description', 'author'=>'author', 'url'=>'url', ); } $fp = fopen( $file, 'r' ); $data = fread( $fp, 8192 ); fclose( $fp ); foreach ( $headers as $field => $regex ) { preg_match( '/' . preg_quote( $regex, '/' ) . ':(.*)$/mi', $data, ${$field}); if ( !empty( ${$field} ) ) { ${$field} = file::cleanup_header_comment( ${$field}[1] ); } else { ${$field} = ''; } } $info = compact( array_keys( $headers ) ); return $info; } public static function put($file, $content='', $overwrite=true) { $file = format::path($file); if ( !folder::exists(dirname($file)) ) { folder::create(dirname($file)); } if ( !file::exists($file) || $overwrite ) { return file_put_contents($file, $content); } return false; } public static function delete($file) { $file = format::path($file); @chmod($file, 0777); @unlink($file); return @file_exists($file) ? false : true; } public static function move($file, $target, $overwrite=true) { $file = format::path($file); $target = format::path($target); if ( $file == $target ) return true; if ( !is_readable($file) OR !is_writable($file) ) return false; if ( !folder::create(dirname($target)) ) return false; if ( $overwrite ) file::delete($target); return @rename($file, $target) ? true : false; } public static function copy($file, $target, $overwrite=true) { $file = format::path($file); $target = format::path($target); if (!is_readable($file) OR !is_writable($file)) return false; if ( !folder::create(dirname($target)) ) return false; if ( $overwrite ) file::delete($target); return @copy($file, $target) ? $target : false; } public static function rename($file, $newname, $overwrite=true) { $file = format::path($file); $target = dirname($file).DS.$newname; return file::move($file, $target, $overwrite); } public static function safename($file) { return preg_replace(array('#(\.){2,}#', '#[^A-Za-z0-9\.\_\- ]#', '#^\.#'), '', $file); } public static function remote($url, $local) { $cp = curl_init($url); $fp = fopen($local,"w"); curl_setopt($cp, CURLOPT_FILE, $fp); curl_setopt($cp, CURLOPT_HEADER, 0); curl_exec($cp); curl_close($cp); fclose($fp); } public function download($file, $name='') { if ( preg_match( "/^(".preg_quote( ZOTOP_URL, "/" )."|".preg_quote( ZOTOP_PATH, "/" ).")(.*)\$/", $file, $matches ) ) { $file = $matches[2]; } $file = strpos($file, ZOTOP_PATH) === false ? ZOTOP_PATH.DS.$file : $file; if ( !file::exists($file) ) { throw new zotop_exception(t('文件 %s 不存在', $file)); } $name = empty($name) ? basename($file) : $name; if ( strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'msie ' ) !== false ) { $name = rawurlencode($name); } $ext = file::ext($name); if ( empty($ext) ) { $ext = file::ext($file); $name = $name.'.'.$ext; } $size = sprintf("%u", file::size($file)); if ( ob_get_length() !== false ) @ob_end_clean(); header('Pragma: public'); header('Last-Modified: '.gmdate('D, d M Y H:i:s') . ' GMT'); header('Cache-Control: no-store, no-cache, must-revalidate'); header('Cache-Control: pre-check=0, post-check=0, max-age=0'); header('Content-Transfer-Encoding: binary'); header('Content-Encoding: none'); header('Content-type: '.$ext); header('Content-Disposition: attachment; filename="'.$name.'"'); header('Content-length: '.$size); readfile($file); exit; } public static function zip($source, $target='', $removepath=true, $overwrite=true) { $source = format::path($source); if ( !folder::exists($source) ) { throw new zotop_exception(t('待压缩文件夹 %s 不存在', $source)); } $target = empty($target) ? dirname($source).DS.basename($source).'.zip' : $target; if ( file::exists($target) and !overwrite ) { throw new zotop_exception(t('文件 %s 已经存在且不允许覆盖', $target)); } if ( !folder::exists(dirname($target)) ) folder::create(dirname($target)); $removepath = ($removepath === true) ? $source : (empty($removepath) ? ZOTOP_PATH : $removepath); $zip = new PclZip($target); if ( $zip->create($source, PCLZIP_OPT_REMOVE_PATH, $removepath) ) { unset($zip); return $target; } return false; } public static function unzip($source, $target='', $overwrite=2) { $source = format::path($source); $target = empty($target) ? dirname($source).DS.file::name($source,true) : $target; if ( !file::exists($source) OR file::ext($source) != 'zip' ) { throw new zotop_exception(t('文件不存在或者不是zip文件',$source)); } if ( folder::exists($target) ) { if ( $overwrite == 0 ) throw new zotop_exception(t('解压目录已经存在且不允许覆盖', $target)); if ( $overwrite == 2 ) folder::clear($target); } else { folder::create($target); } if ( class_exists('ZipArchive') ) { $zip = new ZipArchive; if ( $zip->open($source) === true and $zip->extractTo($target) ) { $zip->close(); unset($zip); return $target; } unset($zip); } else { $zip = new PclZip($source); if ( $zip->extract (PCLZIP_OPT_PATH, $target, PCLZIP_OPT_REPLACE_NEWER) ) { unset($zip); return $target; } unset($zip); } return false; } } defined('ZOTOP') OR die('No direct access allowed.'); class folder { public static function exists($dir) { return is_dir( format::path($dir) ); } public static function size($dir) { $size = 0; $dir = format::path($dir); $handle = @opendir($dir); while ( false!==($f = readdir($handle)) ) { if($f != "." && $f != "..") { if( is_dir("$dir/$f") ) { $size += folder::size("$dir/$f"); } else { $size += filesize("$dir/$f"); } } } @closedir($handle); return $size; } public static function writeable($dir) { if( is_dir($dir) ) { if( $fp = @fopen("$dir/chkdir.test", 'w') ) { @fclose($fp); @unlink("$dir/chkdir.test"); return true; } } return false; } public static function create($dir, $mode = 0755) { $dir = format::path($dir); if ( is_dir($dir) || @mkdir($dir,$mode) ) return true; if ( !folder::create(dirname($dir),$mode) ) return false; return @mkdir($dir,$mode); } public static function clear($path, $recurse=true) { return folder::delete($path, $recurse, false); } public static function delete($path, $recurse=false, $deleteself=true) { $path = format::path($path).DS; if ( !is_dir($path) ) return false; $items = glob($path.'*'); if ( is_array($items) ) { if ( $recurse == false ) return false; foreach( $items as $item ) { if ( is_dir($item) ) { folder::delete($item,true); } else { if ( !@unlink($item) ) return false; } } } if ( $deleteself ) return @rmdir($path); return true; } public static function rename($path, $newname) { $path = format::path($path); $newpath = dirname($path).DS.$newname; if ( $path == $newpath ) return true; if (!is_readable($path) || !is_writable($path)) return false; if ( folder::exists($newpath) ) return false; return @rename($path,$newpath); } public static function move($source, $target, $overwrite=true) { $source = format::path($source).DS; $target = format::path($target).DS.basename($source).DS; if ( dirname($source) == $target ) return true; if ( !is_dir($source) OR !is_readable($source) OR !is_writable($source)) return false; if ( is_dir($target) and $overwrite) folder::delete($target); if ( !folder::create($target) ) return false; $items = glob($source.'*'); if ( is_array($items) ) { foreach($items as $item) { $newpath = format::path($target.DS.basename($item)); if ( is_dir($item) ) { folder::move($item, $newpath); } else { if ( !@rename($item, $newpath) ) return false; } } } return @rmdir($source); } public static function copy($source, $target, $overwrite=true) { $source = format::path($source).DS; $target = format::path($target).DS.basename($source).DS; if ( dirname($source) == $target ) return true; if ( !is_dir($source) OR !is_readable($source) ) return false; if ( is_dir($target) and $overwrite) folder::delete($target); if ( !folder::create($target) ) return false; $items = glob($source.'*'); if ( is_array($items) ) { foreach($items as $item) { $newpath = format::path($target.DS.basename($item)); if ( is_dir($item) ) { folder::copy($item, $newpath); } else { if ( !@copy($item, $newpath) ) return false; } } } return true; } public static function files($path, $recurse=false, $fullpath=false, $ext='', $ignore = array('.svn', 'CVS','.DS_Store','__MACOSX')) { $files =array(); $path = format::path($path); if( !is_dir($path) ) return false; $handle = opendir($path); while (($file = readdir($handle)) !== false) { if( $file != '.' && $file != '..' && !in_array($file,$ignore) ) { $f = $path .DS. $file; if( is_dir($f) ) { if ( $recurse ) { if( is_bool($recurse) ) { $subfiles = folder::files($f,$recurse,$fullpath,$ext); } else { $subfiles = folder::files($f,$recurse-1,$fullpath,$ext); } if( is_array($subfiles) ) { $files = array_merge($files,$subfiles); } } } else { if( !empty($ext) ) { if( is_array($ext) && in_array(file::ext($file),$ext) ) { $files[] = $fullpath ? $f : $file; } } else { $files[] = $fullpath ? $f : $file; } } } } closedir($handle); return $files; } public static function folders($path, $recurse=false, $fullpath=false, $filter='.', $ignore = array('.svn', 'CVS','.DS_Store','__MACOSX')) { $path = format::path($path); if( is_dir($path) ) { $folders = array(); $handle = opendir($path); while ( ($file = readdir($handle)) !== false ) { $f = $path .DS. $file; if( $file != '.' && $file != '..' && !in_array($file,$ignore) && is_dir($f) ) { if ( preg_match("/$filter/", $file) ) { $folders[] = $fullpath ? $f : $file; } if ( $recurse ) { if ( is_integer($recurse) ) { $recurse--; } $subfolders = folder::folders($f, $recurse, $fullpath, $filter,$ignore); $folders = array_merge($folders, $subfolders); } } } closedir($handle); return $folders; } return false; } public function safename($path) { $ds = ( DS == '\\' ) ? '\\'.DS : DS; return preg_replace(array('#[^A-Za-z0-9:\_\-'.$ds.' ]#'), '', $path); } public function dirmap($dir, $s='/') { $data = array(); if ( $dir ) { $dirs = explode($s, trim($dir, $s)); $path = ''; foreach($dirs as $d) { $path .= $d.$s; $data[] = array($d, $path); } } return $data; } } defined('ZOTOP') or die('No direct script access.'); class str { public static function exists($str, $needle) { return !(strpos($str, $needle) === FALSE); } public static function len($str) { return mb_strlen($str,'UTF8'); } public static function is_utf8($str) { return preg_match('%^(?:
			 [\x09\x0A\x0D\x20-\x7E]            # ASCII
		   | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
		   |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
		   | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
		   |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
		   |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
		   | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
		   |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
	   )*$%xs', $str); } public static function is_serialized($data) { if ( empty($data) or !is_string($data)) return false; $data = trim($data); $length = strlen($data); $token = $data[0]; $lastc = $data[$length - 1]; if ('N;' == $data) return true; if ($length < 4) return false; if (':' !== $data[1]) return false; if (';' !== $lastc && '}' !== $lastc) return false; switch ($token) { case 's': if ('"' !== $data[$length - 2]) return false; case 'a': case 'O': return (bool)preg_match("/^{$token}:[0-9]+:/s", $data); case 'b': case 'i': case 'd': return (bool)preg_match("/^{$token}:[0-9.E-]+;\$/", $data); } return false; } public static function substr($str, $start, $length, $charset = "utf-8") { if( function_exists("mb_substr") ) { $slice = mb_substr($str, $start, $length, $charset); } elseif(function_exists('iconv_substr')) { $slice = iconv_substr($str,$start,$length,$charset); } else { $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/"; $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"; $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"; $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"; preg_match_all($re[$charset], $str, $match); $slice = join("",array_slice($match[0], $start, $length)); } return $slice; } public static function cut($str, $length, $charset = "utf-8", $suffix = '...') { $slice = str::substr($str, 0, $length, $charset); if ( $suffix && $str != $slice ) { return $slice.$suffix; } return $slice; } public static function rand($len = 4, $type = '', $addons = '') { $str =''; switch($type) { case 0: $chars= str_repeat('0123456789',3); break; case 1: $chars='ABCDEFGHIJKLMNOPQRSTUVWXYZ'.$addons; break; case 2: $chars='abcdefghijklmnopqrstuvwxyz'.$addons; break; case 3: $chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.$addons; break; default : $chars='ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789'.$addons; break; } if($len>10 ) { $chars= $type==1? str_repeat($chars,$len) : str_repeat($chars,5); } $chars = str_shuffle($chars); $str = substr($chars,0,$len); return $str; } public static function reduceslashes($str) { return preg_replace('#(?<!:)//+#', '/', $str); } public static function explode($str,$s1 = "=", $s2 = '&') { $os = array(); if ( $str and is_string($str) ) { $options = explode($s1, trim($str,$s1)); foreach( $options as $option ) { if ( strpos($option, $s2) ) { list($name, $value) = explode($s2, trim($option)); } else { $name = $value = trim($option); } $os[$name] = $value; } } return $os; } public static function implode($arr, $s1='=', $s2='&') { } } defined('ZOTOP') or die('No direct script access.'); abstract class database { public $config = array(); public $database; protected $connect = null; protected $sql = array(); protected $sqlBuilder = array(); protected $query = null; protected $numRows = 0; protected $lastInsertID = null; protected $transTimes = 0; protected $error = ''; protected $selectSql = 'SELECT%DISTINCT% %FIELDS% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%'; public function &instance(array $config) { static $instances = array(); $id = md5(serialize($config)); if ( !isset($instances[$id]) ) { if ( empty($config['driver']) ) { throw new zotop_exception(t('Error database config',$config)); } $driver = 'database_'.strtolower($config['driver']); if ( !zotop::autoload($driver) ) { throw new zotop_exception(t('Cannot find database driver "%s"',$driver)); } $instance = new $driver($config); $instances[$id] = &$instance; } return $instances[$id]; } public function parseSql($sql) { $sql = $this->compileSql($sql); if( is_string($sql) and !empty($sql) ) { $this->sql[] = $sql; } $this->reset(); return $sql; } public function compileSql($sql) { if ( is_array($sql) OR empty($sql) ) { $sqlBuilder = empty($sql) ? $this->sqlBuilder : array_merge($this->sqlBuilder, $sql); $sql = str_replace( array('%TABLE%','%DISTINCT%','%FIELDS%','%JOIN%','%WHERE%','%GROUP%','%HAVING%','%ORDER%','%LIMIT%'), array( $this->parseFrom($sqlBuilder['from']), $this->parseDistinct($sqlBuilder['distinct']), $this->parseSelect($sqlBuilder['select']), $this->parseJoin($sqlBuilder['join']), $this->parseWhere($sqlBuilder['where']), $this->parseGroupBy($sqlBuilder['groupby']), $this->parseHaving($sqlBuilder['having']), $this->parseOrderBy($sqlBuilder['orderby']), $this->parseLimit($sqlBuilder['limit'], $sqlBuilder['offset']), ), $this->selectSql ); } return $sql; } public function sql() { return is_array($this->sql) ? $this->sql : array(); } public function escape($str) { return addslashes($str); } public function escapeTable($table) { $table = substr($table,0,strlen($this->config['prefix'])) == $this->config['prefix'] ? $table : $this->config['prefix'].$table; if ( stripos($table, ' AS ') !== FALSE ) { $table = str_ireplace(' as ', ' AS ', $table); $table = array_map(array($this, __FUNCTION__), explode(' AS ', $table)); return implode(' AS ', $table); } return '`'.str_replace('.', '`.`', $table).'`'; } public function escapeColumn($field) { if ( $field=='*' ) { return $field; } if ( preg_match('/(avg|count|sum|max|min)\(\s*(.*)\s*\)(\s*as\s*(.+)?)?/i', $field, $matches)) { if ( count($matches) == 3) { return $matches[1].'('.$this->escapeColumn($matches[2]).')'; } else if ( count($matches) == 5) { return $matches[1].'('.$this->escapeColumn($matches[2]).') AS '.$this->escapeColumn($matches[4]); } } if ( strpos($field,'.') !==false ) { $field = $this->config['prefix'].$field; $field = str_replace('.', '`.`', $field); } if ( stripos($field,' as ') !==false ) { $field = str_replace(' as ', '` AS `', $field); } $field = '`'.$field.'`'; $field = str_replace('`*`', '*', $field); return $field; } public function escapeValue($value) { switch (gettype($value)) { case 'string': $value = '\''.$this->escape($value).'\''; break; case 'boolean': $value = ($value === FALSE) ? 0 : 1; break; case 'double': $value = sprintf('%F', $value); break; case 'array': $value = $this->escapeValue(serialize($value)); break; default: $value = ($value === NULL) ? 'NULL' : $value; break; } return (string) $value; } public function sqlBuilder($key='', $value=null) { if ( empty($key) ) return $this->sqlBuilder; if ( is_array($key) ) { $this->sqlBuilder = array_merge($this->sqlBuilder , $key); return $this->sqlBuilder; } if ( isset($value) ) { $this->sqlBuilder[$key] = $value; return $this->sqlBuilder; } return isset($this->sqlBuilder[$key])? $this->sqlBuilder[$key] : false; } public function reset() { $this->sqlBuilder = array(); return $this; } public function select($fields = '*') { if ( func_num_args() > 1 ) { $fields = func_get_args(); } elseif ( is_string($fields) ) { $fields = explode(',', $fields); } $this->sqlBuilder['select'] = (array) $fields; return $this; } public function from($tables='') { if ( !empty($tables) and $tables !== false and $tables !== true ) { if ( func_num_args()>1 ) { $tables = func_get_args(); } elseif ( is_string($tables) ) { $tables = explode(',', $tables); } $this->sqlBuilder['from'] = (array)$tables; } return $this; } public function set($name='', $value='') { if ( $name === '' ) return $this->sqlBuilder['set']; if ( $name === null ) { $this->sqlBuilder['set'] = array(); } elseif ( is_string($name) ) { $data = array($name=>$value); } elseif ( is_array($name) ) { $data = $name; } if ( is_array($data) ) { $this->sqlBuilder['set'] = array_merge((array)$this->sqlBuilder['set'], $data); } return $this; } public function where($key='', $value=null) { if ( $key === '' ) return $this->sqlBuilder['where']; if ( $key === null ) { $this->sqlBuilder['where'] = array(); } elseif ( is_string($key) ) { $where = func_get_args(); switch ( count($where) ) { case 2: $where = array($where[0],'=',$where[1]); break; case 3: $where = array($where[0],$where[1],$where[2]); break; } } elseif ( is_array($key) ) { $where = (func_num_args() == 1) ? $key : func_get_args(); } if ( is_array($where) AND !empty($where) ) { if ( count($this->sqlBuilder['where']) >0 ) { $this->sqlBuilder['where'][] = 'AND'; } $this->sqlBuilder['where'][] = $where; } return $this; } public function orderby($orderby, $direction=null) { if ( $orderby === null ) { $this->sqlBuilder['orderby'] = array(); } elseif ( is_array($orderby) ) { $this->sqlBuilder['orderby'] = array_merge((array)$this->sqlBuilder['orderby'], $orderby); } elseif ( is_string($orderby) ) { $orderby = trim($orderby); if ( strpos($orderby,',') === false ) { if ( strpos($orderby,' ') === false ) { $orders = array($orderby => $direction); } else { list($key, $dir) = explode(' ', trim($orderby)); $orders[$key] = $dir; } } else { $orderbys = explode(',', $orderby); $orders = array(); foreach($orderbys as $order) { list($key, $dir) = explode(' ', trim($order)); $orders[$key] = $dir; } } $this->sqlBuilder['orderby'] = array_merge((array)$this->sqlBuilder['orderby'], $orders); } return $this; } public function join($table, $key, $value, $type='') { if ( ! empty($type)) { $type = strtoupper(trim($type)); if ( ! in_array($type, array('LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER'), TRUE)) { $type = ''; } else { $type .= ' '; } } $join = array(); $join['table'] = $table; $join['key'] = $key; $join['value'] = $value; $join['type'] = $type; $this->sqlBuilder['join'][] = $join; return $this; } public function limit($limit, $offset = 0) { $this->sqlBuilder['limit'] = (int) $limit; if ( $offset !== NULL || !is_int($this->sqlBuilder['offset']) ) { $this->sqlBuilder['offset'] = (int) $offset; } return $this; } public function offset($value) { $this->sqlBuilder['offset'] = (int) $value; return $this; } public function parseFrom($tables) { $array = array(); if ( is_string($tables) ) { $tables = explode(',',$tables); } foreach ($tables as $key=>$table) { $array[] = $this->escapeTable($table); } return implode(',',$array); } public function parseDistinct($distinct) { return empty($distinct) ? '' : ' DISTINCT '; } public function parseSelect($fields) { if ( !empty($fields) ) { if ( is_string($fields) ) { $fields = explode('.',$fields); } $array = array(); foreach($fields as $key=>$filed) { $array[] = $this->escapeColumn($filed); } return implode(',',$array); } return '*'; } public function parseJoin($joins) { $str = ''; if ( is_array($joins) ) { foreach( $joins as $join ) { if ( is_array($join) ) { $str .= ' '.$join['type'].'JOIN '. $this->escapeTable($join['table']) .' ON '. $this->escapeColumn($join['key']) .' = '. $this->escapeColumn($join['value']); } } } return $str; } public function parseWhere($where) { $str = ''; if ( is_array($where) ) { $str = $this->parseWhereArray($where); } else { $str = $where; } return empty($str) ? '' : ' WHERE '.$str; } public function parseWhereArray($where) { if ( !empty($where) ) { if ( is_string($where[0]) && count($where)==3 ) { $where[1] = trim(strtoupper($where[1])); switch($where[1]) { case '=': case '!=': case '<>': case '>': case '<': case '>=': case '<=': case 'IS': case 'IS NOT': return $this->escapeColumn($where[0]).' '.$where[1].' '.$this->escapeValue($where[2]); break; case 'BETWEEN': case 'IN': case 'NOT IN': if ( is_string($where[2]) ) $where[2] = explode(',',$where[2]); if ( is_array($where[2]) ) { $escaped = array(); foreach( $where[2] as $v ) { if (is_numeric($v)) { $escaped[] = $v; } else { $escaped[] = $this->escapeValue($v); } } $where[2] = implode(",", $escaped); } return $this->escapeColumn($where[0]).' '.$where[1].' ('.$where[2].')'; break; case 'LIKE': case '%LIKE%': return $this->escapeColumn($where[0]).' '.trim($where[1],'%').' '.$this->escapeValue('%'.trim($where[2],'%').'%'); break; case 'LIKE%': return $this->escapeColumn($where[0]).' '.trim($where[1],'%').' '.$this->escapeValue(''.trim($where[2],'%').'%'); break; case '%LIKE': return $this->escapeColumn($where[0]).' '.trim($where[1],'%').' '.$this->escapeValue('%'.trim($where[2],'%').''); break; default : return ''; } } $str = ''; for ( $i=0,$j=count($where); $i<$j ; $i++ ) { if ( is_array($where[$i][0]) ) { $str .= '('.$this->parseWhereArray($where[$i]).')'; } elseif ( is_array($where[$i]) ) { $str .= $this->parseWhereArray($where[$i]); } elseif ( is_string($where[$i]) ) { $str .= ' '.strtoupper(trim($where[$i])).' '; } } } return $str; } public function parseGroupBy($group) { return empty($group) ? '' : ' GROUP BY '.$group; } public function parseHaving($having) { return empty($having)? '' : ' HAVING '.$having; } public function parseOrderBy($orderby) { $str = ''; if ( is_array($orderby) ) { foreach ( $orderby as $key=>$direction ) { $direction = strtoupper(trim($direction)); if ( !in_array($direction, array('ASC', 'DESC', 'RAND()', 'RANDOM()', 'NULL')) ) { $direction = 'ASC'; } $str .= ','.$this->escapeColumn($key).' '.$direction; } } else { $str = $orderby; } $str = trim($str,','); return empty($str) ? '' : ' ORDER BY '.$str; } public function parseLimit($limit, $offset=0) { $str = ''; if( is_int($offset) ) { $str .= (int)$offset.','; } if( is_int($limit) ) { $str .= $limit; } return empty($str) ? '' : ' LIMIT '.$str; } public function parseSet($data) { $str = ''; foreach((array)$data as $key=>$val) { if ( is_array($val) && count($val)==3 && in_array($val[1],array('+','-','*','%')) && is_numeric($val[2]) ) { $str .= ','.$this->escapeColumn($key).' = '.$this->escapeColumn($val[0]).$val[1].(int)$val[2]; } else { $str .= ','.$this->escapeColumn($key).' = '.$this->escapeValue($val); } } $str = trim($str,','); return empty($str) ? '' : ' SET '.$str; } public function insert($table='', $data=array(), $replace=false) { if ( $table === true or $table === false ) $replace = $table; $this->from($table)->set($data); $table = $this->sqlBuilder['from']; $data = $this->sqlBuilder['set']; if ( !is_array($data) or empty($table) ) return false; foreach( $data as $field=>$value ) { $fields[] = $this->escapeColumn($field); $values[] = $this->escapeValue($value); } $sql = ($replace ? 'REPLACE' : 'INSERT').' INTO %TABLE% (%FIELDS%) VALUES (%VALUES%)'; $sql = str_replace( array('%TABLE%','%FIELDS%','%VALUES%'), array( $this->parseFrom($table), implode(',', $fields), implode(',', $values) ), $sql ); if ( $this->execute($sql) ) { return $this->lastInsertID ? $this->lastInsertID : true; } return false; } public function update($table='', $data=array(), $where=array()) { $this->from($table)->set($data)->where($where); if( empty($this->sqlBuilder['where']) OR empty($this->sqlBuilder['from']) ) return false; if ( !is_array($this->sqlBuilder['set']) ) return true; $sql = 'UPDATE %TABLE%%SET%%WHERE%'; $sql = str_replace( array('%TABLE%','%SET%','%WHERE%'), array( $this->parseFrom($this->sqlBuilder['from']), $this->parseSet($this->sqlBuilder['set']), $this->parseWhere($this->sqlBuilder['where']), ), $sql ); return $this->execute($sql); } public function delete($table='', $where=array()) { $this->from($table)->where($where); if( empty($this->sqlBuilder['where']) ) { return false; } $sql = 'DELETE FROM %TABLE%%WHERE%'; $sql = str_replace( array('%TABLE%','%WHERE%'), array( $this->parseFrom($this->sqlBuilder['from']), $this->parseWhere($this->sqlBuilder['where']), ), $sql ); return $this->execute($sql); } public function getPage($page=0, $pagesize=10, $total = false) { $page = (int)$page <=0 ? (int)$_GET['page'] : $page; $page = (int)$page <=0 ? 1 : $page; $pagesize = intval($pagesize) > 0 ? intval($pagesize) : 10; $sqlBuilder = $this->sqlBuilder; if ( !is_int($total) or $total <=0 ) { $hash = md5(serialize($sqlBuilder['where'])); if ( $page == 1 or !is_numeric(zotop::cookie($hash))) { $total = $this->reset()->from($sqlBuilder['from'])->where($sqlBuilder['where'])->count(); zotop::cookie($hash,$total); } else { $total = (int)zotop::cookie($hash); } } $this->sqlBuilder($sqlBuilder); $offset = intval($page) > 0 ? (intval($page)-1)*intval($pagesize) : 0; $data = $this->limit($pagesize, $offset)->getAll(); $totalpage = @ceil($total / $pagesize); $prevpage = $page-1 > 0 ? $page-1 : 1; $nextpage = $page+1 < $totalpage ? $page+1 : $totalpage; return array( 'data' => $data, 'total' => $total, 'page' => $page, 'pagesize' => $pagesize, 'firstpage' => 1, 'lastpage' => $totalpage, 'prevpage' => $prevpage, 'nextpage' => $nextpage, 'totalpage'=> $totalpage, ); } public function __call($method, $args) { if( in_array(strtolower($method), array('distinct','having','group','lock'), true)) { $this->sqlBuilder[strtolower($method)] = $args[0]; return $this; } elseif ( in_array(strtolower($method), array('count','sum','min','max','avg'), true) ) { $field = isset($args[0]) ? $args[0] : '*'; $result = $this->select(strtoupper($method).'('.$field.') AS zotop_'.$method)->orderby(null)->getField(); return is_numeric($result) ? $result : 0; } elseif ( in_array(strtolower($method), array('exists','create','drop','size','version','connect','close','query','free','execute','begin','commit','rollback'), true) ) { throw new zotop_exception(t('Database method [ %s ] must be extend', $method)); } throw new zotop_exception(t('Database method [ %s ] not exists', $method)); } public function table($table) { $driver = "database_table_{$this->config['driver']}"; if ( zotop::autoload($driver) ) { return new $driver($this, $table); } throw new zotop_exception(t('Cannot find database driver "%s"',$driver)); } } defined('ZOTOP') or die('No direct script access.'); class database_mysql extends database { public function __construct($config = array()) { if ( !extension_loaded('mysql') ) { throw new zotop_exception(t('Not support `%s`','mysql')); } $default = array( 'hostname' => 'localhost', 'hostport' => '3306', 'username' => 'root', 'password' => '', 'database' => '', 'charset' => 'utf8', 'prefix' => '', 'pconnect' => false ); $this->config = array_merge($default, $config); $this->database = $config['hostname'].':'.$config['hostport'].'/'.$config['database']; } public function __destruct() { $this->free(); $this->close(); } public function connect() { if ( !is_resource($this->connect) ) { $connect = ( $this->config['pconnect'] == TRUE ) ? 'mysql_pconnect' : 'mysql_connect'; if ( $this->connect = @$connect($this->config['hostname'].':'.$this->config['hostport'], $this->config['username'], $this->config['password'], true) ) { if ( @mysql_select_db($this->config['database'], $this->connect) ) { $version = $this->version(); if ( $version > '4.1' && $charset = $this->config['charset'] ) { @mysql_query("SET NAMES '".$charset."'" , $this->connect); } if ($version > '5.0.1') { @mysql_query("SET sql_mode=''",$this->connect); } } else { throw new zotop_exception(t('无法访问数据库 `{1}`，请检查数据库是否存在',$this->config['database'])); } } else { throw new zotop_exception(t('无法连接数据库 `{1}`，请检查您的地址、端口、用户名或者密码是否正确', $this->config['hostname'].':'.$this->config['hostport'])); } } return $this->connect; } public function close() { if ( $this->connect ) { mysql_close($this->connect); } $this->connect = null; } public function query($sql, $silent=false) { if ( $sql = $this->parseSql($sql) ) { if ( $this->query ) $this->free(); if ( $this->query = @mysql_query($sql, $this->connect()) ) { n('db',1); $this->numRows = @mysql_num_rows($this->query); return $this->query; } elseif ( !$silent OR ZOTOP_DEBUG ) { throw new zotop_exception(t('Database error: %s <br/> Sql: %s', @mysql_error(), $sql)); } } return false; } public function execute($sql, $silent=false) { if( false !== $this->query($sql,$silent) ) { $this->numRows = mysql_affected_rows($this->connect); $this->lastInsertID = mysql_insert_id($this->connect); return true; } return false; } public function free() { if ( $this->query ) { @mysql_free_result($this->query); } $this->query = null; } public function begin() { if ($this->transTimes == 0) { @mysql_query('START TRANSACTION', $this->connect()); } $this->transTimes++; return ; } public function commit() { if ($this->transTimes > 0) { $result = @mysql_query('COMMIT', $this->connect()); $this->transTimes = 0; if(!$result) { return false; } } return true; } public function rollback() { if ($this->transTimes > 0) { $result = mysql_query('ROLLBACK', $this->connect()); $this->transTimes = 0; if(!$result) { return false; } } return true; } public function getAll($sql='') { $result = array(); if ( $query = $this->query($sql) ) { if ( $this->numRows >0 ) { while( $row = mysql_fetch_assoc($query) ) { $result[] = $row; } mysql_data_seek($this->query,0); } } return $result; } public function getRow($sql='') { $result = array(); if ( $query = $this->limit(1)->query($sql) ) { if( $row = mysql_fetch_assoc($query) ) { return $row; } } return $result; } public function getField($sql='') { if( $row = $this->getRow($sql) ) { return is_array($row) ? reset($row) : null; } return false; } public function tables() { $tables = array(); $results = $this->getAll('SHOW TABLE STATUS'); foreach((array)$results as $table) { $id = $table['Name']; if ( $this->config['prefix'] and substr($table['Name'],0,strlen($this->config['prefix'])) == $this->config['prefix'] ) { $id = substr($table['Name'], strlen($this->config['prefix'])); } $tables[$id] = array( 'name' => $table['Name'], 'size' => $table['Data_length'] + $table['Index_length'], 'datalength' => $table['Data_length'], 'indexlength' => $table['Index_length'], 'rows' => $table['Rows'], 'engine' => $table['Engine'], 'collation' => $table['Collation'], 'createtime' => $table['Create_time'], 'updatetime' => $table['Update_time'], 'comment' => $table['Comment'], ); } return $tables; } public function exists() { if ( $connect = @mysql_connect($this->config['hostname'].':'.$this->config['hostport'], $this->config['username'], $this->config['password'], true) ) { if ( @mysql_select_db($this->config['database'], $connect) ) { return true; } return false; } throw new zotop_exception(t('Cannot connect database host `%s`', $this->config['hostname'].':'.$this->config['hostport'])); } public function create() { if ( $connect = @mysql_connect($this->config['hostname'].':'.$this->config['hostport'], $this->config['username'], $this->config['password'], true) ) { if ( @mysql_select_db($this->config['database'], $connect) ) { return false; } if ( @mysql_query("CREATE DATABASE IF NOT EXISTS `".$this->config['database']."` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;", $connect) ) { return true; } return false; } throw new zotop_exception(t('Cannot connect database host `%s`', $this->config['hostname'].':'.$this->config['hostport'])); } public function drop() { if ( $connect = @mysql_connect($this->config['hostname'].':'.$this->config['hostport'], $this->config['username'], $this->config['password'], true) ) { if ( @mysql_query("DROP DATABASE IF EXISTS `".$this->config['database']."`;", $connect) ) { return true; } return false; } throw new zotop_exception(t('Cannot connect database host `%s`',$this->config['hostname'].':'.$this->config['hostport'])); } public function escape($str) { if ( is_array($str) ) { foreach ($str as $key => $val) { $str[$key] = $this->escape($val); } return $str; } if ( function_exists('mysql_real_escape_string') AND is_resource($this->connect) ) { $str = mysql_real_escape_string($str, $this->connect); } elseif ( function_exists('mysql_escape_string') ) { $str = mysql_escape_string($str); } else { $str = addslashes($str); } return $str; } public function lastInsertID() { return $this->lastInsertID; } public function error() { return (($this->connect) ? mysql_error($this->connect) : mysql_error()); } public function errno() { return intval(($this->connect) ? mysql_errno($this->connect) : mysql_errno()); } public function size() { $tables = $this->tables(); foreach($tables as $table) { $size += $table['size']; } return $size; } public function version() { return @mysql_get_server_info($this->connect()); } } defined('ZOTOP') or die('No direct script access.'); class database_sqlite extends database { public function __construct($config = array()) { if ( !class_exists('PDO') ) { throw new zotop_exception(t('Not support `%s`','PDO')); } $default = array( 'driver' => 'sqlite', 'hostname' => ZOTOP_PATH_DATA, 'database' => 'zotop.db3', 'charset' => 'utf8', 'prefix' => 'zotop_', 'pconnect' => true ); $this->config = array_merge($default, $config); if ( !is_array( $this->config['params'] ) ) { $this->config['params'] = array(); } if( $this->config['pconnect'] === true ) { $this->config['params'][PDO::ATTR_PERSISTENT] = true; } $this->database = trim($this->config['hostname'],DS).DS.$this->config['database']; } public function __destruct() { $this->free(); $this->close(); } public function connect() { if ( !isset($this->connect) ) { if ( !file_exists($this->database) ) { throw new zotop_exception(t('Cannot connect database `%s`',$this->database)); } try { $this->connect = new PDO('sqlite:'.$this->database, $this->config['username'], $this->config['password'], $this->config['params']); $this->connect->setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL); $this->connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); if ( $charset = $this->config['charset'] ) { $this->connect->query('PRAGMA encoding = '.$this->escape($charset)); } } catch(PDOException $e) { throw new zotop_exception($e->getMessage()); } } return $this->connect; } public function close() { $this->connect = null; } public function query($sql, $silent=false) { if ( $sql = $this->parseSql($sql) ) { if ( $this->query ) $this->free(); try { n('db',1); $this->query = $this->connect()->prepare($sql); $this->query->execute(); return $this->query; } catch(PDOException $e) { if ( !$silent OR ZOTOP_DEBUG ) { throw new zotop_exception(t('Database error: %s <br/> Sql: %s', $e->errorInfo[2], $sql)); } return false; } } return false; } public function execute($sql, $silent=false) { if( false !== $result = $this->query($sql,$silent) ) { $this->numRows = $this->query->rowCount(); if ( preg_match('/^\s*(INSERT\s+INTO|REPLACE\s+INTO)\s+/i', $sql) ) { $this->lastInsertID = $this->connect->lastInsertId(); } return true; } return false; } public function free() { $this->query = null; } public function begin() { if ($this->transTimes == 0) { $this->connect()->beginTransaction(); } $this->transTimes++; return ; } public function commit() { if ( $this->transTimes > 0 ) { $result = $this->connect->commit(); $this->transTimes = 0; if(!$result) { return false; } } return true; } public function rollback() { if ($this->transTimes > 0) { $result = $this->connect->rollback(); $this->transTimes = 0; if(!$result) { return false; } } return true; } public function getAll($sql='') { if ( $query = $this->query($sql) ) { if ( $result = $query->fetchAll(constant('PDO::FETCH_ASSOC')) ) { $this->numRows = count( $result ); return $result; } } return array(); } public function getRow($sql='') { $this->limit(1); if ( $query = $this->query($sql) ) { if ( $result = $query->fetch(constant('PDO::FETCH_ASSOC')) ) { $this->numRows = count( $result ); return $result; } } return false; } public function getField($sql='') { if( $row = $this->getRow($sql) ) { return is_array($row) ? reset($row) : null; } return false; } public function tables() { $tables = array(); $results = $this->getAll("SELECT * FROM `sqlite_master` WHERE `type`='table' ORDER BY `name`;"); foreach((array)$results as $table) { if ( substr($table['name'],0,7) == 'sqlite_' ) continue; if ( $this->config['prefix'] and substr($table['Name'],0,strlen($this->config['prefix'])) != $this->config['prefix'] ) continue; $id = substr($table['Name'],strlen($this->config['prefix'])); $tables[$id] = array( 'name' => $table['name'], 'size' => false, 'datalength' => false, 'indexlength' => false, 'rows' => false, 'engine' => false, 'collation' => false, 'createtime' => false, 'updatetime' => false, 'comment' => false, ); } return $tables; } public function exists() { return @file_exists($this->database); } public function create() { if ( !file_exists($this->database) ) { try { $connect=new PDO('sqlite:'.$this->database, $this->config['username'], $this->config['password'], $this->config['params']); $connect->setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL); $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); if ( $charset = $this->config['charset'] ) { $connect->query('PRAGMA encoding = '.$this->escape($charset)); } return true; } catch(PDOException $e) { throw new zotop_exception($e->getMessage()); } } return false; } public function drop() { if ( $this->exists() ) { return @unlink($this->database); } throw new zotop_exception(t('Cannot connect database `%s`',$this->database)); } public function escape($str) { if (function_exists('sqlite_escape_string')) { return sqlite_escape_string($str); } return str_replace("'", "''", $str); } public function lastInsertID() { return $this->lastInsertID; } public function error() { if( $this->query ) { $error = $this->query->errorInfo(); return $error[2]; } return ''; } public function errno() { } public function size() { return @filesize($this->database); } public function version() { return $this->connect()->getAttribute(constant("PDO::ATTR_SERVER_VERSION")); } } defined('ZOTOP') or die('No direct access allowed.'); class cache { protected $driver = null; protected $config = array(); public function __construct($config = array()) { if (is_string($config)) $config = array('driver' => $config); $config += array( 'driver' => c('system.cache_driver'), 'expire' => intval(c('system.cache_expire')), 'prefix' => c('system.cache_prefix'), ); $driver = empty($config['driver']) ? 'cache_file' : 'cache_' . strtolower($config['driver']); if (!zotop::autoload($driver)) { throw new zotop_exception(t('未能找到缓存驱动<b>%s</b>', $driver)); } $this->driver = new $driver($config); $this->driver->prefix = empty($config['prefix']) ? substr(md5($_SERVER['HTTP_HOST']), 0, 6) : $config['prefix']; $this->driver->prefix = trim($this->driver->prefix, '_') . '_'; return $this->driver; } public static function &instance($config = array()) { static $instances = array(); $id = serialize($config); if (!isset($instances[$id])) { $instance = new cache($config); $instances[$id] = &$instance; } return $instances[$id]; } public function test() { return $this->driver->test(); } protected function escape($id) { $id = empty($id) ? '' : str_replace(array('/','\\',' '), '_', $id); return $this->driver->prefix . $id; } public function get($id) { N('cache.get',1); $id = $this->escape($id); $data = $this->driver->get($id); if ($data === null or $data === false) { return null; } return $data; } public function set($id, $data, $expire = null) { N('cache.set',1); $id = $this->escape($id); if ( $expire === null or $expire === true ) { $expire = $this->config['expire']; } return $this->driver->set($id, $data, intval($expire)); } public function delete($id) { $id = $this->escape($id); return $this->driver->delete($id); } public function clear() { return $this->driver->clear(); } } defined('ZOTOP') OR die('No direct access allowed.'); class cache_file { public $prefix; protected $config = array(); protected $root; public function __construct($config=array()) { $this->config = array_merge($this->config, $config); $this->root = ZOTOP_PATH_CACHE; if ( !$this->test() ) { throw new zotop_exception(t('目录<b>%s</b>不可写', $this->root)); } } public function test() { if ( folder::create($this->root) ) { if ( is_dir($this->root) and is_writable($this->root) ) { return true; } } return false; } public function filepath($id) { $filename = sha1($id).'.php'; $filepath = $this->root.DS.$filename[0].$filename[1].DS.$filename; return $filepath; } public function get($id) { $file = $this->filepath($id); if ( file_exists($file) ) { $data = file_get_contents($file); if( ZOTOP_TIME < intval(substr($data, 0, 10)) ) { return unserialize(substr($data, 10)); } unlink($file); } return false; } public function set($id, $data, $expire=0) { $expire = $expire ? (ZOTOP_TIME + $expire) : (ZOTOP_TIME + 31536000); $file = $this->filepath($id); return file::put($file, $expire.serialize($data)); } public function delete($id) { $file = $this->filepath($id); return file::delete($file); } public function clear() { return folder::clear($this->root); } } defined('ZOTOP') OR die('No direct access allowed.'); class cache_memcache { public $prefix; protected $config = array(); protected $memcache; protected $connected; public function __construct($config=array()) { if ( !$this->test() ) { throw new zotop_exception(t('Memcache PHP extention not loaded')); } $this->config = array_merge($this->config, $config); $this->config += array('servers' => c('system.cache_memcache')); $servers = $this->config['servers']; if ( !is_array($servers) ) { $servers = str_replace(',',"\n", $servers); $servers = explode("\n",$servers); } if ( !$servers) { throw new zotop_exception('未定义memcache缓存服务器'); } $this->memcache = new Memcache(); foreach ($servers as $server) { if ( !is_array($server) ) $server = explode(':', $server); if ( !$this->memcache->addServer($server[0], ( isset($server[1]) ? $server[1] : 11211 ), (isset($server[2]) ? $server[2] : true)) ) { throw new zotop_exception(t('无法连接Memcache服务器 "%s:%s"',$server[0],$server[1])); } } } public function test() { return (extension_loaded('memcache') && class_exists('Memcache')); } public function get($id) { return $this->memcache->get($id); } public function set($id, $data ,$expire=0) { return $this->memcache->set($id, $data, MEMCACHE_COMPRESSED, $expire); } public function delete($id, $timeout=0) { return $this->memcache->delete($id,$timeout); } public function clear() { $result = $this->memcache->flush(); sleep(1); return $result; } } defined('ZOTOP') OR die('No direct access allowed.'); class cache_eaccelerator { public $prefix; public function __construct($config=array()) { if ( !$this->test() ) { throw new zotop_exception(t('Eaccelerator function not exists')); } } public function test() { return (extension_loaded('eaccelerator') && function_exists('eaccelerator_get')); } public function get($id) { return eaccelerator_get($id); } public function set($id, $data ,$expire=0) { return $expire ? eaccelerator_put($id, $data, $expire) : eaccelerator_put($id, $data); } public function delete($id) { return eaccelerator_rm($id); } public function clear() { $infos = eaccelerator_list_keys(); if (is_array($infos)) { foreach ($infos as $info) { if ( FALSE !== strpos($info['name'], $this->prefix) ) { $id = 0 === strpos($info['name'], ':') ? substr($info['name'], 1) : $info['name']; if ( !eaccelerator_rm($id) ) { return FALSE; } } } } return TRUE; } } defined('ZOTOP') OR die('No direct access allowed.'); class cache_apc { public $prefix; public function __construct($config=array()) { if ( !$this->test() ) { throw new zotop_exception(t('apc function not exists')); } } public function test() { return function_exists('apc_cache_info'); } public function get($id) { return apc_fetch($id); } public function set($id, $data ,$expire=0) { return apc_store($id, $data, $expire); } public function delete($id) { return apc_delete($id); } public function clear() { apc_clear_cache(); return TRUE; } } defined('ZOTOP') OR die('No direct access allowed.'); class site_controller extends controller { public function __init() { parent::__init(); if ( c('site.closed') and zotop::user('modelid') != 'admin' ) exit(c('site.closedreason')); define('ZOTOP_SITE', true); define('ZOTOP_THEME', c('site.theme')); if ( file_exists(ZOTOP_PATH_THEMES.DS.ZOTOP_THEME.DS.'global.php') ) { zotop::load(ZOTOP_PATH_THEMES.DS.ZOTOP_THEME.DS.'global.php'); } $this->assign('_USER',zotop::user()); zotop::run('site.init', $this); } } defined('ZOTOP') OR die('No direct access allowed.'); class system_model_alias extends model { protected $pk = 'id'; protected $table = 'alias'; } defined('ZOTOP') OR die('No direct access allowed.'); class system_model_user extends model { protected $pk = 'id'; protected $table = 'user'; public function checkusername($username) { if ( strlen($username) > 32 or strlen($username) < 2 ) { return false; } foreach(array("\\",'&',' ',"'",'"','/','*',',','<','>',"\r","\t","\n","#") as $value) { if( strpos($username, $value) ) return false; } if( !preg_match("/^[a-zA-Z0-9_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+$/", $username)) { return false; } return true; } public function add($data) { if ( $this->checkusername($data['username']) == false ) return $this->error(t('用户名不符合要求')); if ( $this->where('username',$data['username'])->exists() ) return $this->error(t('用户名已经存在')); if ( $this->where('email',$data['email'])->exists() ) return $this->error(t('邮箱已经存在')); $data['password'] = $this->password($data['password']); $data['regtime'] = ZOTOP_TIME; $data['regip'] = request::ip(); if ( $data['id'] = $this->insert($data,true) ) { zotop::run('user.add', $data); return $data['id']; } return false; } public function edit($data, $id) { if ( empty($id) or intval($id) == 0 ) return $this->error(t('用户编号错误')); if ( isset($data['username']) and $this->checkusername($data['username']) == false ) { return $this->error(t('用户名不符合要求')); } if ( !empty($data['password']) ) { $data['password'] = $this->password($data['password']); } else { unset($data['password']); } $data['updatetime'] = ZOTOP_TIME; if ( $this->update($data, $id) ) { $data['id'] = $id; zotop::run('user.edit', $data); return $data['id']; } return false; } public function delete($id) { if ( parent::delete($id) ) { zotop::run('user.delete', $id); return true; } return false; } public function avatar($uid=0, $size='middle', $path=false) { $params = func_get_args(); $avatar = zotop::filter('user.avatar', $avatar, $params); if ( $avatar ) return $avatar; $size = in_array(strtolower($size), array('big', 'middle', 'small','tiny')) ? $size : 'middle'; if ( intval($uid) ) { $uid = abs(intval($uid)); $dir1 = ceil($uid / 10000); $dir2 = ceil($uid % 10000 / 1000); $avatar = '/avatar/'.$dir1.'/'.$dir2.'/'.$uid.'/'.$size.'.jpg'; if ( $path ) return ZOTOP_PATH_UPLOADS.$avatar; if ( file::exists(ZOTOP_PATH_UPLOADS.$avatar) ) return ZOTOP_URL_UPLOADS.$avatar; } return ZOTOP_URL_UPLOADS."/avatar/{$size}.gif"; } public function password($str) { $password = $str; $password = md5($password); return $password; } public function login(array $data) { @extract($data); if( $this->checkusername($username) == false ) return $this->error(t('请输入有效的账户名称')); if( empty($password) or strlen($password) < 3 ) return $this->error(t('请输入有效的账户密码')); $user = $this->where(array('username','=',$username))->getRow(); if( empty($user) ) { return $this->error(t('账户 <b>%s</b> 不存在，请检查是否输入有误',$username)); } if ( $user['password'] != $this->password($password) ) { return $this->error(t('密码 <b>%s</b> 错误，请检查是否输入有误',$password)); } if ( $user['disabled'] ) { return $this->error(t('账户 <b>%s</b> 已经被禁用',$username)); } zotop::run('user.beforelogin',$user); zotop::cookie('user.id',$user['id'], (int)$cookietime); zotop::cookie('user.username',$user['username'], (int)$cookietime); zotop::cookie('user.nickname',$user['nickname'], (int)$cookietime); zotop::cookie('auth',zotop::encode($user['id']."\t".$user['username']."\t".$user['password']."\t".$user['groupid']."\t".$user['modelid']), (int)$cookietime); $this->refresh($user['id']); zotop::run('user.login',$user); return $user; } public function logout() { zotop::cookie('user.id', null); zotop::cookie('user.username', null); zotop::cookie('user.name', null); zotop::cookie('auth', null); zotop::run('user.logout'); return true; } public function refresh($id) { if( empty($id) ) return false; return $this->update(array( 'logintime' => ZOTOP_TIME, 'logintimes' => array('logintimes','+',1), 'loginip'=> request::ip() ),intval($id)); } public function point($id, $point) { if( empty($id) or intval($point) == 0 ) return false; return $this->db()->where('id', intval($id))->set('point',array('point','+',intval($point)))->update(); } public function disabled($id, $disabled) { if ( $id == 1 and intval($disabled) == 1 ) { return $this->error(t('系统管理员不能被锁定')); } return $this->update(array('disabled'=>intval($disabled)), $id); } } defined('ZOTOP') or die('No direct access allowed.'); class content_model_content extends model { protected $pk = 'id'; protected $table = 'content'; public $statuses = array(); public function __construct() { parent::__construct(); $this->statuses = array( 'publish' => t('发布'), 'pending' => t('待审'), 'reject' => t('退稿'), 'draft' => t('草稿'), 'trash' => t('回收站'), ); } public function getAll() { $data = $this->db()->getAll(); foreach ($data as &$d) { if (empty($d['url'])) { $d['url'] = empty($d['alias']) ? U("content/detail/{$d['id']}") : U($d['alias']); } } return $data; } public function getPage($page = 0, $pagesize = 20, $total = false) { $dataset = $this->db()->getPage($page, $pagesize, $total); foreach ($dataset['data'] as &$d) { if (empty($d['url'])) { $d['url'] = empty($d['alias']) ? U("content/detail/{$d['id']}") : U($d['alias']); } } return $dataset; } public function getPendingCount() { static $count = null; if ($count === null) { $count = $this->db()->where('status', '=', 'pending')->count(); } return $count; } public function count() { $result = $this->getField('COUNT(id) AS zotop_count'); return is_numeric($result) ? $result : 0; } public function get($id, $field='') { zotop::run('content.before_get', $id); $data = $this->getbyid($id); if ( is_array($data) and $data['app'] and $data['modelid'] ) { $data['dataid'] = "content-{$id}"; $model = m("{$data['app']}.{$data['modelid']}")->init($this); $model->before_get($data); $data = array_merge($data, $model->get($id)); $model->after_get($data); zotop::run('content.after_get', $data); unset($model); } return $data; } public function save($data) { if ( empty($data['title']) ) return $this->error(t('标题不能为空')); if ( empty($data['app']) ) return $this->error(t('应用不能为空')); if ( empty($data['modelid']) ) return $this->error(t('模型不能为空')); if ( empty($data['categoryid']) ) return $this->error(t('栏目不能为空')); if ( intval(C('content.autosummary')) && empty($data['summary']) && isset($data['content'])) { $data['summary'] = str_replace(array("\r","\n","\r\n","\t",'[page]','[/page]','&ldquo;','&rdquo;','&nbsp;'), '', strip_tags(trim($data['content']))); $data['summary'] = str::cut($data['summary'], intval(C('content.autosummary'))); } if( intval(C('content.autothumb')) && empty($data['thumb']) && isset($data['content']) ) { $imageid = intval(C('content.autothumb')) - 1 ; if( $imageid >= 0 and preg_match_all("/(src)=([\"|']?)([^ \"'>]+\.(gif|jpg|jpeg|bmp|png))\\2/i", stripslashes($data['content']), $matches) ) { $data['thumb'] = $matches[3][$imageid]; } } $data['keywords'] = str_replace('，', ',', $data['keywords']); return empty($data['id']) ? $this->add($data) : $this->edit($data); } public function add($data) { zotop::run('content.before_add', $data); $model = m("{$data['app']}.{$data['modelid']}")->init($this); if (!$model) { return $this->error(t('模型 %s 不存在', $data['app'] . '.' . $data['modelid'])); } if (false === $model->before_add($data)) { return $this->error($model->error()); } if ($data['alias'] and alias($data['alias'])) { return $this->error(t('别名已经存在')); } $data['id'] = null; $data['userid'] = zotop::user('id'); $data['createtime'] = empty($data['createtime']) ? ZOTOP_TIME : strtotime($data['createtime']); $data['status'] = empty($data['status']) ? 'pending' : $data['status']; $data['id'] = $this->insert($data); if ($data['id'] and $model->add($data)) { alias($data['alias'], "content/detail/{$data['id']}"); m('system.attachment')->setRelated("content-{$data['id']}"); $model->after_add($data); zotop::run('content.after_add', $data); return $data['id']; } } public function edit($data) { zotop::run('content.before_edit', $data); $model = m("{$data['app']}.{$data['modelid']}")->init($this); if (!$model) { return $this->error(t('模型 %s 不存在', $data['app'] . '.' . $data['modelid'])); } if (false === $model->before_edit($data)) { return $this->error($model->error()); } if ($data['alias'] and $alias = alias($data['alias'])) { if ($alias != "content/detail/{$data['id']}") return $this->error(t('别名已经存在')); } $data['createtime'] = empty($data['createtime']) ? ZOTOP_TIME : strtotime($data['createtime']); $data['updatetime'] = ZOTOP_TIME; if ($this->update($data)) { if ($model->edit($data)) { alias($data['alias'], "content/detail/{$data['id']}"); $model->after_edit($data); zotop::run('content.after_edit', $data); return $data['id']; } } unset($model); return false; } public function delete($id) { if (is_array($id)) return array_map(array($this, 'delete'), $id); if (empty($id)) return $this->error(t('编号格式错误')); zotop::run('content.before_delete', $id); if ($data = $this->getbyid($id)) { $model = m("{$data['app']}.{$data['modelid']}")->init($this); if ( false === $model->before_delete($data) ) { return $this->error($model->error()); } if (parent::delete($id)) { $model->delete($id); alias(null, "content/detail/{$id}"); m('system.attachment')->delRelated("content-{$id}"); $model->after_delete($data); zotop::run('content.after_delete', $data); return true; } unset($model); } return $this->error(t('编号[%s]数据不存在', $id)); } public function hit($id) { zotop::run('content.hit',$id); if( $id ) { return $this->where('id',$id)->set('hits',array('hits','+',1))->update(); } return false; } public function tag_content($options) { if ( !is_array($options) ) return array(); extract( $options ); $cid = isset($cid)? $cid : $categoryid; if ( $cid ) { $cids = strpos($cid,',') ? explode(',', $cid) : explode(',', m('content.category.get', $cid, 'childids')); } $db = $this->db()->select('*')->where('status','=','publish'); if ( is_array($cids) and $cids ) { ( count($cids) == 1 ) ? $db->where('categoryid','=',intval(reset($cids))) : $db->where('categoryid','in',$cids); } if ( $modelid ) $db->where('modelid','=',$modelid); if ( strtolower($thumb) == 'true' ) $db->where('thumb','!=',''); if ( strtolower($thumb) == 'false' ) $db->where('thumb','=',''); if ( intval($prev) ) { $db->where('id','>',intval($prev)); $orderby = 'id asc'; } if ( intval($next) ) { $db->where('id','<',intval($next)); $orderby = 'id desc'; } if ( intval($prevtime) ) { $db->where('createtime','>',intval($prevtime)); $orderby = 'createtime asc'; } if ( intval($nexttime) ) { $db->where('createtime','<',intval($nexttime)); $orderby = 'createtime desc'; } if ( !empty($weight) ) { if ( strpos( $weight, "," ) === FALSE ) { $db->where('weight','=',intval($weight)); } elseif ( preg_match( "/^\\s*([\\d]*)\\s*\\,\\s*([\\d]*)\\s*\$/", $weight, $m ) ) { if ( $m[1] ) $db->where('weight','>=',intval($m[1])); if ( $m[2] ) $db->where('weight','<=',intval($m[2])); } } if ( !empty($keywords) ) { $keywords = explode(',', $keywords); $keywhere = array(); foreach($keywords as $k) { $keywhere[] = 'or'; $keywhere[] = array('keywords','like', $k); } array_shift($keywhere); $db->where($keywhere); } $ignore and $db->where('id', '!=' , $ignore); $orderby ? $db->orderby($orderby) : $db->orderby('weight desc, createtime desc'); $size = intval($size) ? intval($size) : 10; if ( !empty($page) ) { $page = ( intval($page)>0 ) ? intval($page) : 0; $return = $db->getPage($page, $size, intval($total)); $return['data'] = $this->process($return['data'], $modelid, $modeldata); } else { $return = $db->limit($size)->getAll(); $return = $this->process($return, $modelid, $modeldata); } return $return; } public function process($data, $model=null, $modeldata=null) { $return = array(); foreach ($data as $d) { if (empty($d['url'])) { $d['url'] = empty($d['alias']) ? U("content/detail/{$d['id']}") : U($d['alias']); } if ( $d['style'] ) { $d['style'] = ' style="'.$d['style'].'"'; } if ( $f = C('content.newflag') ) { if ( ( ZOTOP_TIME - $d[$f]) <= C('content.newflag_expires') * 3600 ) $d['new'] = ' <i class="new">'.t('新').'</i>'; } $d['tags'] = explode(',', $d['keywords']); $return[$d['id']] = $d; } if ( $model and $modeldata and !empty($return) ) { $models = m('content.model')->cache(); if ( $model = $models[strtolower($model)] and $model['tablename'] ) { $modeldata = ($modeldata == 'true') ? '*' : 'id,'.$modeldata; $_data = m("{$model['app']}.{$model['id']}")->select($modeldata)->where('id','in', array_keys($return))->orderby(null)->getall(); foreach($_data as $r) { if ( isset( $return[$r['id']] ) ) $return[$r['id']] = array_merge($return[$r['id']], $r); } } } return zotop::filter('content.process', $return); } } defined('ZOTOP') or die('No direct access allowed.'); class content_model_category extends model { protected $pk = 'id'; protected $table = 'content_category'; protected $category = array(); public $types = array(); public function __construct() { parent::__construct(); $this->types = array( 0 => t('栏目'), 1 => t('单页面'), 2 => t('链接') ); $this->category = $this->cache(); } public function get($id= '', $field = '', $key = '') { if ($id and intval($id)) { if ( $field ) { return $this->category[$id][$field]; } if ( $key ) { return $this->category[$id][$field][$key]; } return isset($this->category[$id]) ? $this->category[$id] : array(); } return $this->category; } public function add($data) { if ( empty($data['name']) ) return $this->error(t('名称不能为空')); if ($data['alias'] and alias($data['alias'])) return $this->error(t('别名已经存在')); $data['id'] = $this->max('id') + 1; $data['parentid'] = is_numeric($data['parentid']) ? max(0, $data['parentid']) : 0; $data['rootid'] = is_numeric($data['rootid']) ? $data['rootid'] : $data['id']; $data['listorder'] = $this->where('parentid', '=', $data['parentid'])->max('listorder') + 1; if ($id = $this->insert($data)) { alias($data['alias'], "content/index/{$id}"); m('system.attachment')->setRelated("content-category-{$id}"); $this->category[$id] = $data; $this->repair(); return $id; } return false; } public function edit($data, $id) { if (empty($data['name'])) return $this->error(t('名称不能为空')); if ($data['alias'] and $alias = alias($data['alias'])) { if ($alias != "content/index/{$id}") return $this->error(t('别名已经存在')); } if ( $this->update($data, $id) ) { alias($data['alias'], "content/index/{$id}"); if ( $data['apply-setting-childs'] ) { $childids = $this->get($id,'childids'); $applay = $this->where('id','in', explode(',', $childids))->set('settings', $data['settings'])->update(); } $this->cache(true); return $id; } return false; } public function delete($id) { if ( $this->where('parentid', '=', $id)->count() ) { return $this->error(t('该栏目下尚有子栏目，无法删除')); } if ($this->datacount($id)) { return $this->error(t('该栏目下尚有数据，无法删除')); } if ( parent::delete($id) ) { alias(null, "content/index/{$id}"); $this->category[$id] = null; $this->repair(); return true; } return false; } public function datacount($id) { $count = m('content.content')->where('categoryid', 'in', explode(',', $id))->count(); return $count; } public function getAll() { static $result = array(); if (empty($result)) { $data = $this->db()->orderby('listorder', 'asc')->getAll(); foreach ($data as &$d) { $d['settings'] = unserialize($d['settings']); $d['url'] = empty($d['alias']) ? U("content/index/{$d['id']}") : U($d['alias']); $result[$d['id']] = $d; } } return $result; } public function active($id=0) { static $data = array(); if ( empty($data) ) { foreach ($this->category as $i => $c) { if ($c['disabled']) continue; $data[$i] = $c; } $data = tree::instance($data)->getTree($id); } return $data; } public function contribute() { static $data = array(); if (empty($data)) { foreach ($this->active() as $i => $c) { if ( $c['disabled'] or $c['settings']['contribute'] == 0 ) continue; $data[$i] = $c; } } return $data; } public function getParents($id) { $parents = array(); if ( $id and isset($this->category[$id]) ) { $parentids = $this->category[$id]['parentids']; $parentids = explode(',', $parentids); foreach ($parentids as $parentid) { if ( $c = $this->category[$parentid] ) { $parents[$parentid] = $c; } } } return $parents; } public function getChild($id) { $child = array(); foreach ($this->category as $i => $c) { if ( $id == $c['parentid'] ) { $child[$i] = $c; } } return $child; } public function repair() { @set_time_limit(600); foreach ($this->category as $id => $c) { $parentids = $this->getParentIDs($id); $childids = $this->getChildIDs($id); $childid = $this->getChildID($id); $rootid = reset(explode(',', $parentids)); if ($this->category[$id]['parentids'] != $parentids or $this->category[$id]['childids'] != $childids or $this->category[$id]['childid'] != $childid) { $this->update(array( 'parentids' => $parentids, 'childids' => $childids, 'childid' => $childid, 'rootid' => $rootid), $id); } } $this->cache(true); return true; } private function getParentIDs($id, &$parentids = array()) { if ($id and isset($this->category[$id])) { $parentids[] = $id; if ($parentid = $this->category[$id]['parentid']) { $parentids[] = $parentid; $this->getParentIDs($this->category[$parentid]['parentid'], $parentids); } } return implode(',', array_reverse($parentids, true)); } private function getChildID($id) { $childid = array(); foreach ( $this->category as $c ) { if ($c['parentid'] == $id) { $childid[] = $c['id']; } } return implode(',', $childid); } private function getChildIDs($id) { $childids = $id; if (isset($this->category[$id])) { foreach ($this->category as $c) { if ($c['parentid'] and $c['id'] != $id and $c['parentid'] == $id) { $childids .= ',' . $this->getChildIDs($c['id']); } } } return $childids; } public function move($id, $parentid) { if ($id == $parentid) { return $this->error(t('无法将栏目移动到自己下面')); } $categoty = $this->get($id); if (in_array($parentid, explode(',', $categoty['childids']))) { return $this->error(t('无法将栏目移动到自己的子栏目下面')); } if ($parentid == $categoty['parentid']) { return $this->error(t('已经在该栏目下面了，请重新选择')); } if ( $this->update(array('parentid' => $parentid), $id) ) { $this->category[$id]['parentid'] = $parentid; $this->repair(); return true; } return false; } public function order($ids) { foreach ((array )$ids as $i => $id) { $this->update(array('listorder' => $i + 1), $id); } $this->cache(true); return true; } public function status($id) { if ( $data = $this->get($id) ) { $disabled = $data['disabled'] ? 0 : 1; $childids = explode(',', $data['childids']); $this->where('id', 'in', $childids)->update(array('disabled' => $disabled)); if (!$disabled) { $parentids = explode(',', $data['parentids']); $this->where('id', 'in', $parentids)->update(array('disabled' => $disabled)); } $this->cache(true); return true; } return false; } public function cache($refresh=false) { $cache = zotop::cache('content.category'); if ( $refresh or empty($cache) or !is_array($cache) ) { $cache = $this->getAll(); zotop::cache('content.category', $cache, false); } return $cache; } public function tag_category($attrs) { $category = array(); @extract($attrs); if ( $cid = intval($cid) ) { $category = $this->getChild($cid); } return $this->preprocess($category); } public function tag_position($attrs) { $category = array(); @extract($attrs); if ( $cid = intval($cid) ) { $category = $this->getParents($cid); } return $this->preprocess($category); } private function preprocess($data) { return $data; } } ?>