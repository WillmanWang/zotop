<?php
 zotop::register(array( 'runtime' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'runtime.php', 'debug' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'debug.php', 'zotop_exception' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'exception.php', 'arr' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'array.php', 'pinyin' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'pinyin.php', 'html' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'html.php', 'tree' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'tree.php', 'pagination' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'pagination.php', 'http' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'http.php', 'mail' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'mail.php', 'captcha' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'captcha.php', 'database_table' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'database' . DS . 'table.php', 'database_table_mysql' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'database' . DS . 'table_mysql.php', 'database_table_sqlite' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'database' . DS . 'table_sqlite.php', 'session' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'session.php', 'session_native' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'session' . DS . 'native.php', 'session_file' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'session' . DS . 'file.php', 'image' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'image.php', 'image_gd' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'image' . DS . 'gd.php', 'upload' => ZOTOP_PATH_LIBRARIES . DS . 'classes' . DS . 'upload.php', 'pclzip' => ZOTOP_PATH_LIBRARIES . DS . 'extends' . DS . 'pclzip.lib.php', )); function a($key = null) { return zotop::app($key); } function c($name=null, $value = null, $default = null) { return zotop::config($name, $value, $default); } function m($ns) { static $models = array(); list($app, $model, $method) = explode('.', $ns); $class = $app . '_model_' . $model; if (empty($models[$class])) { $path = a("{$app}.path") . DS . 'models' . DS . $model . '.php'; if (class_exists($class) == false) zotop::load($path); if (class_exists($class) == false) { throw new zotop_exception(t('模型实例化失败，模型文件 {1} 或者 模型类 {2} 不存在', $path, $class)); } $models[$class] = new $class(); } if (empty($method)) { return $models[$class]; } if (method_exists($models[$class], $method)) { $args = func_get_args(); return call_user_func_array(array(&$models[$class], $method), array_slice($args, 1)); } throw new zotop_exception(t('模型 {1} 中找不到方法 {2} 方法', $class, $method)); } function l($key = null, $val = null) { static $langs = array(); if (empty($key)) return $langs; if (is_array($key)) { $langs = array_merge($langs, $key); return $langs; } if (is_null($val)) { return isset($langs[$key]) ? $langs[$key] : $key; } $langs[$key] = $val; return $val; } function t($str, $params = '') { $str = l($str); $params = is_array($params) ? $params : func_get_args(); foreach ($params as $key => $val) { $str = str_replace('{' . $key . '}', $val, $str); } return count($params) < 2 ? $str : vsprintf($str, array_slice($params, 1)); } function u($uri = '', $params = array(), $host = true) { return zotop::url($uri, $params, $host); } function n($key, $step = 0) { static $n = array(); if (!isset($n[$key])) { $n[$key] = 0; } if (empty($step)) { return $n[$key]; } $n[$key] = $n[$key] + intval($step); } function thumb($image, $width, $height, $default = null) { $default = $default ? $default : ZOTOP_URL_UPLOADS . '/noimage.png'; if (empty($image)) return $default; if (preg_match("/(" . preg_quote(ZOTOP_PATH_UPLOADS, "/") . "|" . preg_quote(ZOTOP_URL_UPLOADS, "/") . ")(.*)\$/", $image, $matches)) { $img = $matches[2]; } if (strpos($img, '://') or !file_exists(ZOTOP_PATH_UPLOADS . $img)) return $image; $newimg = dirname($img) . '/thumb_' . $width . '_' . $height . '_' . basename($img); if (!file_exists(ZOTOP_PATH_UPLOADS . $newimg) || filemtime(ZOTOP_PATH_UPLOADS . $newimg) < filemtime(ZOTOP_PATH_UPLOADS . $img)) { try { $image = new image(ZOTOP_PATH_UPLOADS . $img); $image->thumb($width, $height)->save(ZOTOP_PATH_UPLOADS . $newimg); } catch (exception $e) { return $image; } } return ZOTOP_URL_UPLOADS . $newimg; } zotop::register(array( 'priv' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'priv.php', 'rewrite' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'rewrite.php', 'plupload' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'plupload.php', 'system_field' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'field.php', 'site_controller' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'site_controller.php', 'admin_controller' => ZOTOP_PATH_APPS.DS.'system'.DS.'libraries'.DS.'admin_controller.php', )); form::field('date',array('system_field','date')); form::field('datetime',array('system_field','datetime')); form::field('image',array('system_field','image')); form::field('file',array('system_field','file')); form::field('keywords',array('system_field','keywords')); form::field('alias',array('system_field','alias')); form::field('captcha',array('system_field','captcha')); form::field('template',array('system_field','template')); form::field('template_editor',array('system_field','template_editor')); form::field('code',array('system_field','template_editor')); zotop::add('system.globalmsg','system_globalmsg'); function system_globalmsg($msg) { if ( ZOTOP_DEBUG ) { $msg[] = array( 'text' => t('调试模式开启中，请关闭'), 'href' => u('system/config/safety'), 'type' => 'warning', ); } if ( folder::exists(ZOTOP_PATH.DS.'install') ) { $msg[] = array( 'text' => t('安装目录尚未删除，为确保安全请删除安装目录'), 'href' => 'javascript:;', 'type' => 'warning', ); } return $msg; } zotop::add('zotop.route','system_alias'); function system_alias() { $app = array_shift(explode('/', zotop::$uri)); if ( !a($app) ) { if ( $uri = alias(zotop::$uri) ) zotop::$uri = $uri; } unset($app); } function alias($a, $b='') { $alias = m('system.alias'); $a = trim(strtolower($a)); $b = trim(strtolower($b)); if ( $a ) { if ( $b === '' ) return $alias->where('alias',$a)->getField('source'); if ( $b === null ) return $alias->where('alias', $a)->delete(); return $alias->insert(array('app' => ZOTOP_APP,'alias' => $a,'source'=> $b), true); } if ( $b ) return $alias->where('source',$b)->delete(); return false; } function site($key) { return 'ttt'; } zotop::register(array( 'content_model' => ZOTOP_PATH_APPS.DS.'content'.DS.'libraries'.DS.'model.php', 'content_api' => ZOTOP_PATH_APPS.DS.'content'.DS.'libraries'.DS.'api.php', )); zotop::add('system.start','content_api::start'); zotop::add('system.globalnavbar','content_api::globalnavbar'); zotop::add('system.globalmsg','content_api::globalmsg'); zotop::add('member.navlist','content_api::membernavlist'); form::field('title', 'content_api::field_title'); form::field('gallery', 'content_api::field_gallery'); zotop::add('zotop.ready','content_tags'); function content_tags() { template::tag('content'); function tag_content($attrs) { $result = array(); switch(strtolower($attrs['action'])) { case 'category': $result = m('content.category')->tag_category($attrs); break; case 'position': $result = m('content.category')->tag_position($attrs); break; default: $result = m('content.content')->tag_content($attrs); break; } return $result; } } define('BLOCK_PATH_CACHE', ZOTOP_PATH_RUNTIME . DS . 'block'); define('BLOCK_TEMPLATE_ALONE', false); zotop::add('system.start', 'block_system_start'); function block_system_start($nav) { $nav['block'] = array( 'text' => A('block.name'), 'href' => u('block/admin'), 'icon' => A('block.url') . '/app.png', 'description' => A('block.description'), 'allow' => priv::allow('block')); return $nav; } zotop::add('system.globalnavbar', 'block_system_globalnavbar'); function block_system_globalnavbar($nav) { $nav['block'] = array( 'text' => t('区块'), 'href' => u('block/admin'), 'icon' => A('block.url') . '/app.png', 'description' => A('block.description'), 'allow' => priv::allow('block'), 'current' => (ZOTOP_APP == 'block')); return $nav; } zotop::add('template.parse', 'block_template_parse'); function block_template_parse($str, $tpl) { return preg_replace("/\{block(\s+[^}]+?)\}/ie", "block_tag_parse('\\1',\$tpl)", $str); } function block_tag_parse($str, $tpl) { $attrs = $tpl->_attrs($str); $attrs = $attrs ? $attrs : array('id'=>trim(trim(trim($str),"'"),'"')); if ( $id = intval($attrs['id']) ) { if ( file_exists(BLOCK_PATH_CACHE . DS . "{$id}.html") ) { return file_get_contents(BLOCK_PATH_CACHE . DS . "{$id}.html"); } return m('block.block.publish', $id, $tpl, $attrs); } return '<div class="error block-error">'.t('区别编号错误').'</div>'; } zotop::add('system.start','guestbook_system_start'); function guestbook_system_start($start) { $start['guestbook'] = array( 'text' => A('guestbook.name'), 'href' => u('guestbook/admin'), 'icon' => A('guestbook.url').'/app.png', 'description' => A('guestbook.description'), 'allow' => priv::allow('guestbook') ); if ( $pending = m('guestbook.guestbook')->getPendingCount() ) { $start['guestbook']['msg'] = '<a href="'.u('guestbook/admin/index/pending').'">'.t('%s 条新留言',$pending).'</a>'; } return $start; } zotop::add('system.globalnavbar','guestbook_globalnavbar'); function guestbook_globalnavbar($nav) { $nav['guestbook'] = array( 'text' => t('留言'), 'href' => u('guestbook/admin'), 'icon' => A('guestbook.url').'/app.png', 'description' => A('guestbook.description'), 'allow' => priv::allow('guestbook'), 'current' => (ZOTOP_APP == 'guestbook') ); return $nav; } zotop::add('system.globalmsg','guestbook_globalmsg'); function guestbook_globalmsg($msg) { if ( $pending = m('guestbook.guestbook')->getPendingCount() ) { $msg[] = array( 'text' => t('您有 %s 条等待审核的新留言，请尽快处理……', $pending), 'href' => u('guestbook/admin/index/pending'), 'type' => 'pending', ); } return $msg; } zotop::register('ueditor_field',ZOTOP_PATH_APPS.DS.'ueditor'.DS.'libraries'.DS.'ueditor_field.php'); form::field('editor',array('ueditor_field','editor')); form::field('ueditor',array('ueditor_field','editor')); zotop::register(array( 'area_api' => A('area.path') . DS . 'libraries' . DS . 'api.php', )); zotop::add('system.start', 'area_api::start'); form::field('area', 'area_api::select'); zotop::add('field.controls', 'area_api::controls'); zotop::register(array( 'dbimport_api' => A('dbimport.path') . DS . 'libraries' . DS . 'api.php', )); zotop::add('system.start', 'dbimport_api::start'); form::field('dbimport_test', 'dbimport_api::test'); zotop::add('system.start','developer_system_start'); function developer_system_start($start) { $start = arr::before($start,'system_info','developer',array( 'text' => A('developer.name'), 'href' => U('developer'), 'icon' => A('developer.url').'/app.png', 'description' => A('developer.description') )); return $start; } zotop::register(array( 'form_api' => A('form.path') . DS . 'libraries' . DS . 'api.php', )); zotop::add('system.start', 'form_api::start'); template::tag('formdata','tag_formdata'); function tag_formdata($attrs) { return form_api::data($attrs); } zotop::register(array( 'kefu_api' => A('kefu.path') . DS . 'libraries' . DS . 'api.php', )); zotop::add('system.start', 'kefu_api::start'); zotop::add('site.footer', 'kefu_show'); function kefu_show() { echo '<script type="text/javascript" src="'.u('kefu').'"></script>'; } zotop::register(array( 'member_api' => A('member.path') . DS . 'libraries' . DS . 'api.php', 'member_controller' => A('member.path') . DS . 'libraries' . DS . 'member_controller.php', )); zotop::add('system.start', 'member_api::start'); zotop::add('system.globalnavbar','member_api::globalnavbar'); form::field('member_test', 'member_api::test'); zotop::register(array( 'sitemap' => A('sitemap.path') . DS . 'libraries' . DS . 'sitemap.php', 'sitemap_api' => A('sitemap.path') . DS . 'libraries' . DS . 'api.php', )); zotop::add('system.start', 'sitemap_api::start'); zotop::add('sitemap.items','sitemap_api::content'); zotop::after('zotop.boot', array('application','finduri'), 'translator_alias'); function translator_alias() { if ( zotop::$uri == 'system/alias/get' ) { zotop::$uri = 'translator/alias/get'; } } ?>